
Tp_SpiAds1293.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004104  08004104  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800410c  0800410c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          0000010c  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c162  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2d  00000000  00000000  0002c232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000980  00000000  00000000  0002ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d34  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101bc  00000000  00000000  0005628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e49eb  00000000  00000000  00066448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ae33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c78  00000000  00000000  0014ae84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f9c 	.word	0x08003f9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	08003f9c 	.word	0x08003f9c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ads1293Init>:
/**
 * @brief  Initialize ADS1293 device
 * @param  dummy set this value to 0
 * @retval bool Init process status
 */
bool_t ads1293Init(uint8_t dummy) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	/* Init SPI peripheral */
	if (!spiInit(0)) {
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f8e2 	bl	8000778 <spiInit>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f083 0301 	eor.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <ads1293Init+0x20>
		return false;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e003      	b.n	80005cc <ads1293Init+0x28>
	}

	/* Set device CS to HIGH */
	setNSS(GPIO_PIN_SET);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 f93f 	bl	8000848 <setNSS>

	return true;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <ads1293ReadID>:
/**
 * @brief  Read ADS1293 ID register
 * @param  pidData pointer to the uint8_t buffer
 * @retval uint8_t ID value
 */
void ads1293ReadID(uint8_t *pidData) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	uint8_t ptxData = REVID | RREG;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	73fb      	strb	r3, [r7, #15]

	/* Validate *pidData */
	if (pidData == NULL) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d007      	beq.n	80005f6 <ads1293ReadID+0x22>
		return;
	}

	/* Read register and get sensor ID into pidData */
	ads1293ReadRegister(&ptxData, pidData, REG_ID_SIZE);
 80005e6:	f107 030f 	add.w	r3, r7, #15
 80005ea:	2201      	movs	r2, #1
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f805 	bl	80005fe <ads1293ReadRegister>
 80005f4:	e000      	b.n	80005f8 <ads1293ReadID+0x24>
		return;
 80005f6:	bf00      	nop

}
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <ads1293ReadRegister>:
 * @param  ptxData pointer to the uint8_t buffer to be sent with the register address
 * @param  prxData pointer to the uint8_t buffer to store the register value
 * @param  size size amount of data to be sent
 * @retval none
 */
void ads1293ReadRegister(uint8_t *ptxData, uint8_t *prxData, uint16_t size) {
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	4613      	mov	r3, r2
 800060a:	80fb      	strh	r3, [r7, #6]
	/* Validate *ptxData, *prxData and size parameters */
	if (ptxData == NULL || prxData == NULL || size <= 0) {
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d01c      	beq.n	800064c <ads1293ReadRegister+0x4e>
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d019      	beq.n	800064c <ads1293ReadRegister+0x4e>
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d016      	beq.n	800064c <ads1293ReadRegister+0x4e>
		return;
	}

	/* ADS1293 sensor uses 7bit register addresses. MSB in ptxData indicates if the register is being
	 * read or write. Set MSB to 1 will read the register value */
	uint8_t readAddress = *ptxData | RREG;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000626:	b2db      	uxtb	r3, r3
 8000628:	75fb      	strb	r3, [r7, #23]

	/* Set ADS1293 CS to LOW to start communication */
	setNSS(GPIO_PIN_RESET);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f90c 	bl	8000848 <setNSS>

	/* Send register address with the read command over SPI protocol */
	spiSendData(&readAddress, REG_ID_SIZE);
 8000630:	f107 0317 	add.w	r3, r7, #23
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f8d2 	bl	80007e0 <spiSendData>

	/* Read register and load value into *prxData */
	spiReceiveData(prxData, REG_ID_SIZE);
 800063c:	2101      	movs	r1, #1
 800063e:	68b8      	ldr	r0, [r7, #8]
 8000640:	f000 f8e8 	bl	8000814 <spiReceiveData>

	/* Set ADS1293 CS to HIGH to finish communication */
	setNSS(GPIO_PIN_SET);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 f8ff 	bl	8000848 <setNSS>
 800064a:	e000      	b.n	800064e <ads1293ReadRegister+0x50>
		return;
 800064c:	bf00      	nop
}
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <ads1293WriteRegister>:
 * @param  ptxData pointer to the uint8_t buffer to be sent with the register address
 * @param  prxData pointer to the uint8_t buffer to store the register value
 * @param  size size amount of data to be sent
 * @retval none
 */
void ads1293WriteRegister(uint8_t wrAddress, uint8_t data, uint16_t size) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	460b      	mov	r3, r1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	80bb      	strh	r3, [r7, #4]
	uint8_t dataToSend = data;
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	73fb      	strb	r3, [r7, #15]

	/* ADS1293 sensor uses 7bit register addresses. MSB in ptxData indicates if the register is being
	 * read or write. Set MSB to 1 will read the register value */
	uint8_t writeAddress = wrAddress & WREG;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000670:	b2db      	uxtb	r3, r3
 8000672:	73bb      	strb	r3, [r7, #14]

	/* Set ADS1293 CS to LOW to start communication */
	setNSS(GPIO_PIN_RESET);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f8e7 	bl	8000848 <setNSS>

	/* Send register address with the read command over SPI protocol */
	spiSendData(&writeAddress, size);
 800067a:	88ba      	ldrh	r2, [r7, #4]
 800067c:	f107 030e 	add.w	r3, r7, #14
 8000680:	4611      	mov	r1, r2
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f8ac 	bl	80007e0 <spiSendData>

	/* Send register address with the read command over SPI protocol */
	spiSendData(&dataToSend, size);
 8000688:	88ba      	ldrh	r2, [r7, #4]
 800068a:	f107 030f 	add.w	r3, r7, #15
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f8a5 	bl	80007e0 <spiSendData>

	/* Set ADS1293 CS to HIGH to finish communication */
	setNSS(GPIO_PIN_SET);
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f8d6 	bl	8000848 <setNSS>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <ads1293Set3LeadECG>:
/**
 * @brief  Set ADS1293 to start a 3 lead ecg
 * @param  none
 * @retval ADS1293 status
 */
void ads1293Set3LeadECG(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/* Connect channel 1’s INP to IN2 and INN to IN1 */
	ads1293WriteRegister(FLEX_CH1_CN, 0x11, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2111      	movs	r1, #17
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ffd1 	bl	8000654 <ads1293WriteRegister>
	/* Connect channel 2’s INP to IN3 and INN to IN1 */
	ads1293WriteRegister(FLEX_CH2_CN, 0x19, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2119      	movs	r1, #25
 80006b6:	2002      	movs	r0, #2
 80006b8:	f7ff ffcc 	bl	8000654 <ads1293WriteRegister>
	/* Enable the common-mode detector on input pins IN1, IN2 and IN3 */
	ads1293WriteRegister(CMDET_EN, 0x07, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2107      	movs	r1, #7
 80006c0:	200a      	movs	r0, #10
 80006c2:	f7ff ffc7 	bl	8000654 <ads1293WriteRegister>
	/* Connect the output of the RLD amplifier internally to pin IN4 */
	ads1293WriteRegister(RLD_CN, 0x04, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2104      	movs	r1, #4
 80006ca:	200c      	movs	r0, #12
 80006cc:	f7ff ffc2 	bl	8000654 <ads1293WriteRegister>
	/* Use external crystal and feed the internal oscillator's output to the digital */
	ads1293WriteRegister(OSC_CN, 0x04, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2104      	movs	r1, #4
 80006d4:	2012      	movs	r0, #18
 80006d6:	f7ff ffbd 	bl	8000654 <ads1293WriteRegister>
	/* Shuts down unused channel 3’s signal path */
	ads1293WriteRegister(AFE_SHDN_CN, 0x24, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	2124      	movs	r1, #36	; 0x24
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ffb8 	bl	8000654 <ads1293WriteRegister>
	/* Configures the R2 decimation rate as 5 for all channels */
	ads1293WriteRegister(R2_RATE, 0x02, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2102      	movs	r1, #2
 80006e8:	2021      	movs	r0, #33	; 0x21
 80006ea:	f7ff ffb3 	bl	8000654 <ads1293WriteRegister>
	/* Configures the R3 decimation rate as 6 for channel 1 */
	ads1293WriteRegister(R3_RATE_CH1, 0x02, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2102      	movs	r1, #2
 80006f2:	2022      	movs	r0, #34	; 0x22
 80006f4:	f7ff ffae 	bl	8000654 <ads1293WriteRegister>
	/* Configures the R3 decimation rate as 6 for channel 2 */
	ads1293WriteRegister(R3_RATE_CH2, 0x02, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2102      	movs	r1, #2
 80006fc:	2023      	movs	r0, #35	; 0x23
 80006fe:	f7ff ffa9 	bl	8000654 <ads1293WriteRegister>
	/* Configures the DRDYB source to channel 1 ECG (or fastest channel) */
	ads1293WriteRegister(DRDYB_SRC, 0x08, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	2108      	movs	r1, #8
 8000706:	2027      	movs	r0, #39	; 0x27
 8000708:	f7ff ffa4 	bl	8000654 <ads1293WriteRegister>
	/* Enables channel 1 ECG and channel 2 ECG for loop read-back mode */
	ads1293WriteRegister(CH_CNFG, 0x30, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	2130      	movs	r1, #48	; 0x30
 8000710:	202f      	movs	r0, #47	; 0x2f
 8000712:	f7ff ff9f 	bl	8000654 <ads1293WriteRegister>
	/* Starts data conversion */
	ads1293WriteRegister(CONFIG, 0x01, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	2101      	movs	r1, #1
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff9a 	bl	8000654 <ads1293WriteRegister>

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <ads1293ReadDataLoop>:
/**
 * @brief  Read loop read-back register
 * @param  sourceBytes source bytes number
 * @retval ADS1293 status
 */
void ads1293ReadDataLoop(uint8_t *rawData, uint32_t sourceBytes) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	/* Read DATA_LOOP register */
	uint8_t readAddress = DATA_LOOP | RREG;
 800072e:	23d0      	movs	r3, #208	; 0xd0
 8000730:	72fb      	strb	r3, [r7, #11]

	/* Set ADS1293 CS to LOW to start communication */
	setNSS(GPIO_PIN_RESET);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f888 	bl	8000848 <setNSS>

	/* Send register address with the read command over SPI protocol */
	spiSendData(&readAddress, sizeof(uint8_t));
 8000738:	f107 030b 	add.w	r3, r7, #11
 800073c:	2101      	movs	r1, #1
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f84e 	bl	80007e0 <spiSendData>

	for (uint32_t i = 0; i < (1 + sourceBytes); ++i) {
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e009      	b.n	800075e <ads1293ReadDataLoop+0x3a>
		spiReceiveData(&rawData[i], sizeof(uint8_t));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f85e 	bl	8000814 <spiReceiveData>
	for (uint32_t i = 0; i < (1 + sourceBytes); ++i) {
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3f0      	bcc.n	800074a <ads1293ReadDataLoop+0x26>
	}

	/* Set ADS1293 CS to HIGH to finish communication */
	setNSS(GPIO_PIN_RESET);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 f86d 	bl	8000848 <setNSS>

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <spiInit>:
/**
 * @brief  Initialize SPI peripheral
 * @param  dummy set this value to 0
 * @retval bool Init process status
 */
bool_t spiInit(uint8_t dummy) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	/*##-1- Configure the SPI peripheral ######################################*/
	hspi.Instance = SPI1;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <spiInit+0x60>)
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <spiInit+0x64>)
 8000786:	601a      	str	r2, [r3, #0]

	hspi.Init.Mode = SPI_MODE_MASTER;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <spiInit+0x60>)
 800078a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078e:	605a      	str	r2, [r3, #4]
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <spiInit+0x60>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
	hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <spiInit+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
	hspi.Init.CLKPolarity = SPI_POLARITY_LOW; //CPOL = 0
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <spiInit+0x60>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
	hspi.Init.CLKPhase = SPI_PHASE_2EDGE; //CPHA = 1
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <spiInit+0x60>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	615a      	str	r2, [r3, #20]
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <spiInit+0x60>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
	hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <spiInit+0x60>)
 80007b0:	2228      	movs	r2, #40	; 0x28
 80007b2:	61da      	str	r2, [r3, #28]
	hspi.Init.NSS = SPI_NSS_SOFT;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <spiInit+0x60>)
 80007b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ba:	619a      	str	r2, [r3, #24]

	/* Init peripheral */
	if (HAL_SPI_Init(&hspi) != HAL_OK) {
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <spiInit+0x60>)
 80007be:	f001 fbc7 	bl	8001f50 <HAL_SPI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <spiInit+0x54>
		/* Initialization Error */
		return false;
 80007c8:	2300      	movs	r3, #0
 80007ca:	e000      	b.n	80007ce <spiInit+0x56>
	}
	return true;
 80007cc:	2301      	movs	r3, #1
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000bc 	.word	0x200000bc
 80007dc:	40013000 	.word	0x40013000

080007e0 <spiSendData>:
 * @brief  Send data through the SPI MOSI line
 * @param  ptxData pointer to the uint8_t buffer to be sent
 * @param  size amount of data to be sent
 * @retval none
 */
void spiSendData(uint8_t *ptxData, uint16_t size) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
	/* Validate ptxData and size parameters */
	if (ptxData == NULL || size <= 0) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00a      	beq.n	8000808 <spiSendData+0x28>
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <spiSendData+0x28>
		return;
	}

	HAL_SPI_Transmit(&hspi, ptxData, size, HAL_MAX_DELAY);
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <spiSendData+0x30>)
 8000802:	f001 fc36 	bl	8002072 <HAL_SPI_Transmit>
 8000806:	e000      	b.n	800080a <spiSendData+0x2a>
		return;
 8000808:	bf00      	nop
}
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000bc 	.word	0x200000bc

08000814 <spiReceiveData>:
 * @brief  Receive data from the SPI MISO line
 * @param  prxData pointer to the uint8_t buffer
 * @param  size amount of data to be sent
 * @retval none
 */
void spiReceiveData(uint8_t *prxData, uint16_t size) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	807b      	strh	r3, [r7, #2]
	/* Validate ptxData and size parameters */
	if (prxData == NULL || size <= 0) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00a      	beq.n	800083c <spiReceiveData+0x28>
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d007      	beq.n	800083c <spiReceiveData+0x28>
		return;
	}

	HAL_SPI_Receive(&hspi, prxData, size, HAL_MAX_DELAY);
 800082c:	887a      	ldrh	r2, [r7, #2]
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <spiReceiveData+0x30>)
 8000836:	f001 fd7a 	bl	800232e <HAL_SPI_Receive>
 800083a:	e000      	b.n	800083e <spiReceiveData+0x2a>
		return;
 800083c:	bf00      	nop
}
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000bc 	.word	0x200000bc

08000848 <setNSS>:
/**
 * @brief  Handle NSS line by software
 * @param  state set line to high or low
 * @retval none
 */
void setNSS(GPIO_PinState state) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPIx_NSS_SOFT_GPIO_PORT, SPIx_NSS_SOFT_PIN, state);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	461a      	mov	r2, r3
 8000856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <setNSS+0x20>)
 800085c:	f000 fd56 	bl	800130c <HAL_GPIO_WritePin>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020c00 	.word	0x40020c00

0800086c <debounceFSM_init>:
/**
 * @brief  Initialize Debounce Finite State Machine FSM
 * @param  none
 * @retval None
 */
void debounceFSM_init(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	/* Initialize User Button */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f8f4 	bl	8000a60 <BSP_PB_Init>

	currentState = BUTTON_UP;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <debounceFSM_init+0x1c>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
	buttonPressed = false;
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <debounceFSM_init+0x20>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000114 	.word	0x20000114
 800088c:	20000115 	.word	0x20000115

08000890 <uartInit>:
/**
 * @brief  Initialize UART peripheral
 * @param  none
 * @retval bool Init process status
 */
bool_t uartInit(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

	/*##-1- Configure the UART peripheral ######################################*/
	/* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	UartHandle.Instance = USARTx;
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <uartInit+0xa0>)
 8000896:	4a27      	ldr	r2, [pc, #156]	; (8000934 <uartInit+0xa4>)
 8000898:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate = 9600;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <uartInit+0xa0>)
 800089c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a0:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <uartInit+0xa0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <uartInit+0xa0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_ODD;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <uartInit+0xa0>)
 80008b0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80008b4:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <uartInit+0xa0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <uartInit+0xa0>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <uartInit+0xa0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]

	/* Init peripheral */
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 80008c8:	4819      	ldr	r0, [pc, #100]	; (8000930 <uartInit+0xa0>)
 80008ca:	f002 f9fd 	bl	8002cc8 <HAL_UART_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <uartInit+0x48>
		/* Initialization Error */
		return false;
 80008d4:	2300      	movs	r3, #0
 80008d6:	e028      	b.n	800092a <uartInit+0x9a>
	} else {
		uartSendString((uint8_t*) UART_WELCOME_MSG);
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <uartInit+0xa8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f83b 	bl	8000958 <uartSendString>
		uartSendString((uint8_t*) UART_BAUDRATE_MSG);
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <uartInit+0xac>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f836 	bl	8000958 <uartSendString>
		uartSendString((uint8_t*) UART_WORDLENGTH_MSG);
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <uartInit+0xb0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f831 	bl	8000958 <uartSendString>
		uartSendString((uint8_t*) UART_STOPBITS_MSG);
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <uartInit+0xb4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f82c 	bl	8000958 <uartSendString>
		uartSendString((uint8_t*) UART_PARITY_MSG);
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <uartInit+0xb8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f827 	bl	8000958 <uartSendString>
		uartSendString((uint8_t*) UART_FLOWCONTROL_MSG);
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <uartInit+0xbc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f822 	bl	8000958 <uartSendString>
		uartSendString((uint8_t*) UART_MODE_MSG);
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <uartInit+0xc0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f81d 	bl	8000958 <uartSendString>
		uartSendString((uint8_t*) UART_OVERSAMPLING_MSG);
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <uartInit+0xc4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f818 	bl	8000958 <uartSendString>
		return true;
 8000928:	2301      	movs	r3, #1
	}

}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000118 	.word	0x20000118
 8000934:	40004800 	.word	0x40004800
 8000938:	20000000 	.word	0x20000000
 800093c:	20000004 	.word	0x20000004
 8000940:	20000008 	.word	0x20000008
 8000944:	2000000c 	.word	0x2000000c
 8000948:	20000010 	.word	0x20000010
 800094c:	20000014 	.word	0x20000014
 8000950:	20000018 	.word	0x20000018
 8000954:	2000001c 	.word	0x2000001c

08000958 <uartSendString>:
/**
 * @brief  Send string to the console
 * @param  pstring pointer to the array to be sent to the console
 * @retval none
 */
void uartSendString(uint8_t *pstring) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	/* Validates pstring parameter */
	if (pstring == NULL) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00b      	beq.n	800097e <uartSendString+0x26>
		return;
	}

	/* Send pstring to the console */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring,
			strlen((const char*) pstring), HAL_MAX_DELAY);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fc42 	bl	80001f0 <strlen>
 800096c:	4603      	mov	r3, r0
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring,
 800096e:	b29a      	uxth	r2, r3
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <uartSendString+0x30>)
 8000978:	f002 f9f3 	bl	8002d62 <HAL_UART_Transmit>
 800097c:	e000      	b.n	8000980 <uartSendString+0x28>
		return;
 800097e:	bf00      	nop
}
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000118 	.word	0x20000118

0800098c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d10e      	bne.n	80009ba <BSP_LED_Init+0x2e>
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <BSP_LED_Init+0x94>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <BSP_LED_Init+0x94>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <BSP_LED_Init+0x94>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	e00d      	b.n	80009d6 <BSP_LED_Init+0x4a>
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <BSP_LED_Init+0x94>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <BSP_LED_Init+0x94>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <BSP_LED_Init+0x94>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <BSP_LED_Init+0x98>)
 80009da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <BSP_LED_Init+0x9c>)
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	f107 0214 	add.w	r2, r7, #20
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fac2 	bl	8000f84 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <BSP_LED_Init+0x9c>)
 8000a04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <BSP_LED_Init+0x98>)
 8000a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	f000 fc7a 	bl	800130c <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	080040b0 	.word	0x080040b0
 8000a28:	20000020 	.word	0x20000020

08000a2c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <BSP_LED_Toggle+0x2c>)
 8000a3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4906      	ldr	r1, [pc, #24]	; (8000a5c <BSP_LED_Toggle+0x30>)
 8000a42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4610      	mov	r0, r2
 8000a4a:	f000 fc78 	bl	800133e <HAL_GPIO_TogglePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000020 	.word	0x20000020
 8000a5c:	080040b0 	.word	0x080040b0

08000a60 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <BSP_PB_Init+0xa4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <BSP_PB_Init+0xa4>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <BSP_PB_Init+0xa4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d112      	bne.n	8000ab8 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <BSP_PB_Init+0xa8>)
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	f107 020c 	add.w	r2, r7, #12
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fa66 	bl	8000f84 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d11d      	bne.n	8000afa <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000acc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <BSP_PB_Init+0xa8>)
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fa51 	bl	8000f84 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000ae2:	2328      	movs	r3, #40	; 0x28
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fa13 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000af0:	2328      	movs	r3, #40	; 0x28
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fa2a 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	2000002c 	.word	0x2000002c

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <SystemInit+0x60>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <SystemInit+0x60>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <SystemInit+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <SystemInit+0x64>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <SystemInit+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <SystemInit+0x64>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <SystemInit+0x64>)
 8000b38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <SystemInit+0x64>)
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <SystemInit+0x68>)
 8000b46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <SystemInit+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <SystemInit+0x64>)
 8000b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SystemInit+0x60>)
 8000b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b60:	609a      	str	r2, [r3, #8]
#endif
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	40023800 	.word	0x40023800
 8000b74:	24003010 	.word	0x24003010

08000b78 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000bcc:	f000 f884 	bl	8000cd8 <HAL_IncTick>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f002 fd32 	bl	800366c <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20030000 	.word	0x20030000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	2000015c 	.word	0x2000015c
 8000c3c:	200001b0 	.word	0x200001b0

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x34>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x34>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x34>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x34>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f94f 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	200f      	movs	r0, #15
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f000 fc82 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f967 	bl	8000f6a <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f92f 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000030 	.word	0x20000030
 8000cd0:	20000038 	.word	0x20000038
 8000cd4:	20000034 	.word	0x20000034

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000038 	.word	0x20000038
 8000cfc:	20000160 	.word	0x20000160

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000160 	.word	0x20000160

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000038 	.word	0x20000038

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff29 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff3e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff31 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	e177      	b.n	8001290 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8166 	bne.w	800128a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d005      	beq.n	8000fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d130      	bne.n	8001038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	f003 0201 	and.w	r2, r3, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b03      	cmp	r3, #3
 8001042:	d017      	beq.n	8001074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d123      	bne.n	80010c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	69b9      	ldr	r1, [r7, #24]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80c0 	beq.w	800128a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <HAL_GPIO_Init+0x324>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a65      	ldr	r2, [pc, #404]	; (80012a8 <HAL_GPIO_Init+0x324>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <HAL_GPIO_Init+0x324>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001126:	4a61      	ldr	r2, [pc, #388]	; (80012ac <HAL_GPIO_Init+0x328>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_GPIO_Init+0x32c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d037      	beq.n	80011c2 <HAL_GPIO_Init+0x23e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a57      	ldr	r2, [pc, #348]	; (80012b4 <HAL_GPIO_Init+0x330>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d031      	beq.n	80011be <HAL_GPIO_Init+0x23a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a56      	ldr	r2, [pc, #344]	; (80012b8 <HAL_GPIO_Init+0x334>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d02b      	beq.n	80011ba <HAL_GPIO_Init+0x236>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a55      	ldr	r2, [pc, #340]	; (80012bc <HAL_GPIO_Init+0x338>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d025      	beq.n	80011b6 <HAL_GPIO_Init+0x232>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a54      	ldr	r2, [pc, #336]	; (80012c0 <HAL_GPIO_Init+0x33c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01f      	beq.n	80011b2 <HAL_GPIO_Init+0x22e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a53      	ldr	r2, [pc, #332]	; (80012c4 <HAL_GPIO_Init+0x340>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x22a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_GPIO_Init+0x344>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x348>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <HAL_GPIO_Init+0x34c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x350>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x21a>
 800119a:	2309      	movs	r3, #9
 800119c:	e012      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 800119e:	230a      	movs	r3, #10
 80011a0:	e010      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011a2:	2308      	movs	r3, #8
 80011a4:	e00e      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e00c      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00a      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011ae:	2305      	movs	r3, #5
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x240>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x328>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_GPIO_Init+0x354>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001206:	4a34      	ldr	r2, [pc, #208]	; (80012d8 <HAL_GPIO_Init+0x354>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_GPIO_Init+0x354>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001230:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <HAL_GPIO_Init+0x354>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_GPIO_Init+0x354>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125a:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <HAL_GPIO_Init+0x354>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_GPIO_Init+0x354>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_GPIO_Init+0x354>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f ae84 	bls.w	8000fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40021400 	.word	0x40021400
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40022400 	.word	0x40022400
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001350:	887a      	ldrh	r2, [r7, #2]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	041a      	lsls	r2, r3, #16
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43d9      	mvns	r1, r3
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	400b      	ands	r3, r1
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_UART_MspInit>:
 *           - Peripheral's clock enable
 *           - Peripheral's GPIO Configuration
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_UART_MspInit+0x9c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <HAL_UART_MspInit+0x9c>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_UART_MspInit+0x9c>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
	USARTx_RX_GPIO_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_UART_MspInit+0x9c>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_UART_MspInit+0x9c>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_UART_MspInit+0x9c>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

	/* Enable USARTx clock */
	USARTx_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_UART_MspInit+0x9c>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_UART_MspInit+0x9c>)
 80013be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_UART_MspInit+0x9c>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_TX_PIN;
 80013d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80013e2:	2307      	movs	r3, #7
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <HAL_UART_MspInit+0xa0>)
 80013ee:	f7ff fdc9 	bl	8000f84 <HAL_GPIO_Init>

	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80013f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80013f8:	2307      	movs	r3, #7
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <HAL_UART_MspInit+0xa0>)
 8001404:	f7ff fdbe 	bl	8000f84 <HAL_GPIO_Init>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020c00 	.word	0x40020c00

08001418 <HAL_SPI_MspInit>:
 *           - Peripheral's clock enable
 *           - Peripheral's GPIO Configuration
 * @param spi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable SPIx clock */
	SPIx_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 800142a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800142e:	6453      	str	r3, [r2, #68]	; 0x44
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001438:	623b      	str	r3, [r7, #32]
 800143a:	6a3b      	ldr	r3, [r7, #32]

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO SPI clocks */
	SPIx_SCK_GPIO_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
 800144c:	4b45      	ldr	r3, [pc, #276]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	69fb      	ldr	r3, [r7, #28]
	SPIx_MISO_GPIO_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a40      	ldr	r2, [pc, #256]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	69bb      	ldr	r3, [r7, #24]
	SPIx_MOSI_GPIO_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a39      	ldr	r2, [pc, #228]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
	SPIx_NSS_GPIO_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	4a32      	ldr	r2, [pc, #200]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6313      	str	r3, [r2, #48]	; 0x30
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
	SPIx_NSS_SOFT_GPIO_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <HAL_SPI_MspInit+0x14c>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/*Configure GPIO pin : ADS1293_DRDB_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4822      	ldr	r0, [pc, #136]	; (8001568 <HAL_SPI_MspInit+0x150>)
 80014de:	f7ff fd51 	bl	8000f84 <HAL_GPIO_Init>

	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 80014e2:	2320      	movs	r3, #32
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80014ea:	2305      	movs	r3, #5
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	481d      	ldr	r0, [pc, #116]	; (800156c <HAL_SPI_MspInit+0x154>)
 80014f6:	f7ff fd45 	bl	8000f84 <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8001502:	2305      	movs	r3, #5
 8001504:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4817      	ldr	r0, [pc, #92]	; (800156c <HAL_SPI_MspInit+0x154>)
 800150e:	f7ff fd39 	bl	8000f84 <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 800151a:	2305      	movs	r3, #5
 800151c:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <HAL_SPI_MspInit+0x154>)
 8001526:	f7ff fd2d 	bl	8000f84 <HAL_GPIO_Init>

	/* SPI NSS GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 800152a:	2310      	movs	r3, #16
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_NSS_AF;
 8001532:	2305      	movs	r3, #5
 8001534:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <HAL_SPI_MspInit+0x154>)
 800153e:	f7ff fd21 	bl	8000f84 <HAL_GPIO_Init>

	/* SPI NSS Software GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_NSS_SOFT_PIN;
 8001542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30

	HAL_GPIO_Init(SPIx_NSS_SOFT_GPIO_PORT, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001558:	f7ff fd14 	bl	8000f84 <HAL_GPIO_Init>

}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	; 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40020000 	.word	0x40020000

08001570 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_PWREx_EnableOverDrive+0x90>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_PWREx_EnableOverDrive+0x90>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_PWREx_EnableOverDrive+0x90>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_PWREx_EnableOverDrive+0x94>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ac:	f7ff fba8 	bl	8000d00 <HAL_GetTick>
 80015b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015b2:	e009      	b.n	80015c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b4:	f7ff fba4 	bl	8000d00 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c2:	d901      	bls.n	80015c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e01f      	b.n	8001608 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_PWREx_EnableOverDrive+0x98>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d1ee      	bne.n	80015b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015dc:	f7ff fb90 	bl	8000d00 <HAL_GetTick>
 80015e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015e2:	e009      	b.n	80015f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015e4:	f7ff fb8c 	bl	8000d00 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f2:	d901      	bls.n	80015f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e007      	b.n	8001608 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <HAL_PWREx_EnableOverDrive+0x98>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001604:	d1ee      	bne.n	80015e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	420e0040 	.word	0x420e0040
 8001618:	40007000 	.word	0x40007000
 800161c:	420e0044 	.word	0x420e0044

08001620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e267      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d075      	beq.n	800172a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b04      	cmp	r3, #4
 8001648:	d00c      	beq.n	8001664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b85      	ldr	r3, [pc, #532]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	2b08      	cmp	r3, #8
 8001654:	d112      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001656:	4b82      	ldr	r3, [pc, #520]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001662:	d10b      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d05b      	beq.n	8001728 <HAL_RCC_OscConfig+0x108>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d157      	bne.n	8001728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e242      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x74>
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a75      	ldr	r2, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01d      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x98>
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6f      	ldr	r2, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6c      	ldr	r2, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a68      	ldr	r2, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb12 	bl	8000d00 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb0e 	bl	8000d00 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e207      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0xc0>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fafe 	bl	8000d00 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fafa 	bl	8000d00 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1f3      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0xe8>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1c7      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x244>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff fab3 	bl	8000d00 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff faaf 	bl	8000d00 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1a8      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4925      	ldr	r1, [pc, #148]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x244>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa92 	bl	8000d00 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fa8e 	bl	8000d00 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e187      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d036      	beq.n	8001878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_RCC_OscConfig+0x248>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fa72 	bl	8000d00 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fa6e 	bl	8000d00 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e167      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x200>
 800183e:	e01b      	b.n	8001878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_OscConfig+0x248>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff fa5b 	bl	8000d00 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e00e      	b.n	800186c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fa57 	bl	8000d00 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d907      	bls.n	800186c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e150      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
 8001860:	40023800 	.word	0x40023800
 8001864:	42470000 	.word	0x42470000
 8001868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ea      	bne.n	800184e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8097 	beq.w	80019b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a7c      	ldr	r2, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b77      	ldr	r3, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b74      	ldr	r3, [pc, #464]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a73      	ldr	r2, [pc, #460]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fa17 	bl	8000d00 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff fa13 	bl	8000d00 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e10c      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x2ea>
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x324>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x30c>
 8001912:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x324>
 800192c:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 0304 	bic.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d015      	beq.n	8001978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f9d8 	bl	8000d00 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f9d4 	bl	8000d00 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0cb      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ee      	beq.n	8001954 <HAL_RCC_OscConfig+0x334>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff f9c2 	bl	8000d00 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff f9be 	bl	8000d00 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0b5      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ee      	bne.n	8001980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80a1 	beq.w	8001b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d05c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d141      	bne.n	8001a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f992 	bl	8000d00 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f98e 	bl	8000d00 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e087      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f967 	bl	8000d00 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f963 	bl	8000d00 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e05c      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x416>
 8001a54:	e054      	b.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f950 	bl	8000d00 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f94c 	bl	8000d00 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e045      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x444>
 8001a82:	e03d      	b.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e038      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x4ec>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d028      	beq.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d121      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11a      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0cc      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d90c      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b65      	ldr	r3, [pc, #404]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0b8      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	494d      	ldr	r1, [pc, #308]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d044      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d119      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e07f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e06f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e067      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4934      	ldr	r1, [pc, #208]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c00:	f7ff f87e 	bl	8000d00 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7ff f87a 	bl	8000d00 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e04f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d20c      	bcs.n	8001c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e032      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4916      	ldr	r1, [pc, #88]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d009      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	490e      	ldr	r1, [pc, #56]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c96:	f000 f821 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	5ccb      	ldrb	r3, [r1, r3]
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe ffde 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	080040b8 	.word	0x080040b8
 8001cd4:	20000030 	.word	0x20000030
 8001cd8:	20000034 	.word	0x20000034

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce0:	b094      	sub	sp, #80	; 0x50
 8001ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ce8:	2300      	movs	r3, #0
 8001cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cec:	2300      	movs	r3, #0
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d00d      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x40>
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	f200 80e1 	bhi.w	8001ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d0e:	e0db      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b73      	ldr	r3, [pc, #460]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d14:	e0db      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d16:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d1a:	e0d8      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d26:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	2200      	movs	r2, #0
 8001d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d4e:	4622      	mov	r2, r4
 8001d50:	462b      	mov	r3, r5
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d60:	0150      	lsls	r0, r2, #5
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4621      	mov	r1, r4
 8001d68:	1a51      	subs	r1, r2, r1
 8001d6a:	6139      	str	r1, [r7, #16]
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d80:	4659      	mov	r1, fp
 8001d82:	018b      	lsls	r3, r1, #6
 8001d84:	4651      	mov	r1, sl
 8001d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d8a:	4651      	mov	r1, sl
 8001d8c:	018a      	lsls	r2, r1, #6
 8001d8e:	4651      	mov	r1, sl
 8001d90:	ebb2 0801 	subs.w	r8, r2, r1
 8001d94:	4659      	mov	r1, fp
 8001d96:	eb63 0901 	sbc.w	r9, r3, r1
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dae:	4690      	mov	r8, r2
 8001db0:	4699      	mov	r9, r3
 8001db2:	4623      	mov	r3, r4
 8001db4:	eb18 0303 	adds.w	r3, r8, r3
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	462b      	mov	r3, r5
 8001dbc:	eb49 0303 	adc.w	r3, r9, r3
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dce:	4629      	mov	r1, r5
 8001dd0:	024b      	lsls	r3, r1, #9
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dd8:	4621      	mov	r1, r4
 8001dda:	024a      	lsls	r2, r1, #9
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de2:	2200      	movs	r2, #0
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dec:	f7fe fa58 	bl	80002a0 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df8:	e058      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	099b      	lsrs	r3, r3, #6
 8001e00:	2200      	movs	r2, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	4611      	mov	r1, r2
 8001e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e14:	4642      	mov	r2, r8
 8001e16:	464b      	mov	r3, r9
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	0159      	lsls	r1, r3, #5
 8001e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e26:	0150      	lsls	r0, r2, #5
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e32:	4649      	mov	r1, r9
 8001e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e50:	eb63 050b 	sbc.w	r5, r3, fp
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	00eb      	lsls	r3, r5, #3
 8001e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e62:	00e2      	lsls	r2, r4, #3
 8001e64:	4614      	mov	r4, r2
 8001e66:	461d      	mov	r5, r3
 8001e68:	4643      	mov	r3, r8
 8001e6a:	18e3      	adds	r3, r4, r3
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	464b      	mov	r3, r9
 8001e70:	eb45 0303 	adc.w	r3, r5, r3
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e82:	4629      	mov	r1, r5
 8001e84:	028b      	lsls	r3, r1, #10
 8001e86:	4621      	mov	r1, r4
 8001e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	028a      	lsls	r2, r1, #10
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e96:	2200      	movs	r2, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	61fa      	str	r2, [r7, #28]
 8001e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea0:	f7fe f9fe 	bl	80002a0 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ec6:	e002      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3750      	adds	r7, #80	; 0x50
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	007a1200 	.word	0x007a1200

08001ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000030 	.word	0x20000030

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f04:	f7ff fff0 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	080040c8 	.word	0x080040c8

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f2c:	f7ff ffdc 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0b5b      	lsrs	r3, r3, #13
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	080040c8 	.word	0x080040c8

08001f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e083      	b.n	800206a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f72:	d009      	beq.n	8001f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
 8001f7a:	e005      	b.n	8001f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d106      	bne.n	8001fa2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fa3b 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	ea42 0103 	orr.w	r1, r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	0c1b      	lsrs	r3, r3, #16
 8002020:	f003 0104 	and.w	r1, r3, #4
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f003 0210 	and.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203c:	d105      	bne.n	800204a <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b292      	uxth	r2, r2
 8002048:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b088      	sub	sp, #32
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_SPI_Transmit+0x22>
 8002090:	2302      	movs	r3, #2
 8002092:	e148      	b.n	8002326 <HAL_SPI_Transmit+0x2b4>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800209c:	f7fe fe30 	bl	8000d00 <HAL_GetTick>
 80020a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d002      	beq.n	80020b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
 80020b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020b6:	e12d      	b.n	8002314 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_Transmit+0x52>
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020c8:	e124      	b.n	8002314 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2203      	movs	r2, #3
 80020ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	88fa      	ldrh	r2, [r7, #6]
 80020e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002110:	d10f      	bne.n	8002132 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002130:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213a:	d10f      	bne.n	800215c <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800215a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d007      	beq.n	800217a <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002182:	d14b      	bne.n	800221c <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_SPI_Transmit+0x120>
 800218c:	8afb      	ldrh	r3, [r7, #22]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d13e      	bne.n	8002210 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	1c9a      	adds	r2, r3, #2
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021b6:	e02b      	b.n	8002210 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d112      	bne.n	80021ec <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ea:	e011      	b.n	8002210 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ec:	f7fe fd88 	bl	8000d00 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d803      	bhi.n	8002204 <HAL_SPI_Transmit+0x192>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002202:	d102      	bne.n	800220a <HAL_SPI_Transmit+0x198>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800220e:	e081      	b.n	8002314 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ce      	bne.n	80021b8 <HAL_SPI_Transmit+0x146>
 800221a:	e04c      	b.n	80022b6 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_SPI_Transmit+0x1b8>
 8002224:	8afb      	ldrh	r3, [r7, #22]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d140      	bne.n	80022ac <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002250:	e02c      	b.n	80022ac <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d113      	bne.n	8002288 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	330c      	adds	r3, #12
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	86da      	strh	r2, [r3, #54]	; 0x36
 8002286:	e011      	b.n	80022ac <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002288:	f7fe fd3a 	bl	8000d00 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d803      	bhi.n	80022a0 <HAL_SPI_Transmit+0x22e>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d102      	bne.n	80022a6 <HAL_SPI_Transmit+0x234>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022aa:	e033      	b.n	8002314 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1cd      	bne.n	8002252 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022be:	d107      	bne.n	80022d0 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022ce:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fcb5 	bl	8002c44 <SPI_EndRxTxTransaction>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	77fb      	strb	r3, [r7, #31]
 8002310:	e000      	b.n	8002314 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8002312:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002324:	7ffb      	ldrb	r3, [r7, #31]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	; 0x28
 8002332:	af02      	add	r7, sp, #8
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800234e:	d112      	bne.n	8002376 <HAL_SPI_Receive+0x48>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10e      	bne.n	8002376 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2204      	movs	r2, #4
 800235c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f969 	bl	8002644 <HAL_SPI_TransmitReceive>
 8002372:	4603      	mov	r3, r0
 8002374:	e162      	b.n	800263c <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_SPI_Receive+0x56>
 8002380:	2302      	movs	r3, #2
 8002382:	e15b      	b.n	800263c <HAL_SPI_Receive+0x30e>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800238c:	f7fe fcb8 	bl	8000d00 <HAL_GetTick>
 8002390:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023a2:	e142      	b.n	800262a <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_SPI_Receive+0x82>
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023b4:	e139      	b.n	800262a <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2204      	movs	r2, #4
 80023ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fc:	d116      	bne.n	800242c <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800241c:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002434:	d10f      	bne.n	8002456 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d007      	beq.n	8002474 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d162      	bne.n	8002542 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800247c:	e02e      	b.n	80024dc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d115      	bne.n	80024b8 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f103 020c 	add.w	r2, r3, #12
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024b6:	e011      	b.n	80024dc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b8:	f7fe fc22 	bl	8000d00 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d803      	bhi.n	80024d0 <HAL_SPI_Receive+0x1a2>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d102      	bne.n	80024d6 <HAL_SPI_Receive+0x1a8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024da:	e0a6      	b.n	800262a <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1cb      	bne.n	800247e <HAL_SPI_Receive+0x150>
 80024e6:	e031      	b.n	800254c <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d113      	bne.n	800251e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	b292      	uxth	r2, r2
 8002502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	1c9a      	adds	r2, r3, #2
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800251c:	e011      	b.n	8002542 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800251e:	f7fe fbef 	bl	8000d00 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d803      	bhi.n	8002536 <HAL_SPI_Receive+0x208>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d102      	bne.n	800253c <HAL_SPI_Receive+0x20e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002540:	e073      	b.n	800262a <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1cd      	bne.n	80024e8 <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002554:	d144      	bne.n	80025e0 <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002564:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	2101      	movs	r1, #1
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fa79 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002580:	e053      	b.n	800262a <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258a:	d107      	bne.n	800259c <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	b292      	uxth	r2, r2
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	e008      	b.n	80025ae <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f103 020c 	add.w	r2, r3, #12
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2201      	movs	r2, #1
 80025b6:	2101      	movs	r1, #1
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fa55 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0202 	orr.w	r2, r3, #2
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	77fb      	strb	r3, [r7, #31]
      goto error;
 80025d4:	e029      	b.n	800262a <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80025de:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fac7 	bl	8002b78 <SPI_EndRxTransaction>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	2b10      	cmp	r3, #16
 8002602:	d10a      	bne.n	800261a <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f043 0202 	orr.w	r2, r3, #2
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002618:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	77fb      	strb	r3, [r7, #31]
 8002626:	e000      	b.n	800262a <HAL_SPI_Receive+0x2fc>
  }

error :
 8002628:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800263a:	7ffb      	ldrb	r3, [r7, #31]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002656:	2301      	movs	r3, #1
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_SPI_TransmitReceive+0x2a>
 800266a:	2302      	movs	r3, #2
 800266c:	e1f8      	b.n	8002a60 <HAL_SPI_TransmitReceive+0x41c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002676:	f7fe fb43 	bl	8000d00 <HAL_GetTick>
 800267a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00f      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x74>
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800269e:	d107      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x6c>
 80026a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d003      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
 80026b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026b6:	e1c9      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x86>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x86>
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026d0:	e1bc      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d003      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2205      	movs	r2, #5
 80026e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002724:	d10f      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d007      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800276c:	f040 808b 	bne.w	8002886 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_SPI_TransmitReceive+0x13a>
 8002778:	8b7b      	ldrh	r3, [r7, #26]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d178      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	881a      	ldrh	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	1c9a      	adds	r2, r3, #2
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a2:	e065      	b.n	8002870 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d12d      	bne.n	800280e <HAL_SPI_TransmitReceive+0x1ca>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d028      	beq.n	800280e <HAL_SPI_TransmitReceive+0x1ca>
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d125      	bne.n	800280e <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	1c9a      	adds	r2, r3, #2
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10c      	bne.n	800280e <HAL_SPI_TransmitReceive+0x1ca>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fc:	d107      	bne.n	800280e <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800280c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d119      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x20c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d014      	beq.n	8002850 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	b292      	uxth	r2, r2
 8002832:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	1c9a      	adds	r2, r3, #2
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800284c:	2301      	movs	r3, #1
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002850:	f7fe fa56 	bl	8000d00 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800285c:	429a      	cmp	r2, r3
 800285e:	d807      	bhi.n	8002870 <HAL_SPI_TransmitReceive+0x22c>
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d003      	beq.n	8002870 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800286e:	e0ed      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d194      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x160>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d18f      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x160>
 8002884:	e08e      	b.n	80029a4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x250>
 800288e:	8b7b      	ldrh	r3, [r7, #26]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d17d      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ba:	e069      	b.n	8002990 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d12e      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x2e4>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d029      	beq.n	8002928 <HAL_SPI_TransmitReceive+0x2e4>
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d126      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x2e4>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002916:	d107      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002926:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d119      	bne.n	800296a <HAL_SPI_TransmitReceive+0x326>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d014      	beq.n	800296a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002966:	2301      	movs	r3, #1
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800296a:	f7fe f9c9 	bl	8000d00 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002976:	429a      	cmp	r2, r3
 8002978:	d803      	bhi.n	8002982 <HAL_SPI_TransmitReceive+0x33e>
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d102      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x344>
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800298e:	e05d      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d190      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x278>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d18b      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d119      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	2201      	movs	r2, #1
 80029b6:	2101      	movs	r1, #1
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f855 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80029d6:	e039      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80029e0:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d10d      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0202 	orr.w	r2, r3, #2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002a04:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f917 	bl	8002c44 <SPI_EndRxTxTransaction>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a28:	e010      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	e000      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8002a4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3730      	adds	r7, #48	; 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a78:	f7fe f942 	bl	8000d00 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a88:	f7fe f93a 	bl	8000d00 <HAL_GetTick>
 8002a8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	015b      	lsls	r3, r3, #5
 8002a94:	0d1b      	lsrs	r3, r3, #20
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a9e:	e054      	b.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa6:	d050      	beq.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aa8:	f7fe f92a 	bl	8000d00 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d902      	bls.n	8002abe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d13d      	bne.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002acc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad6:	d111      	bne.n	8002afc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae0:	d004      	beq.n	8002aec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aea:	d107      	bne.n	8002afc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002afa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b04:	d10f      	bne.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e017      	b.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d19b      	bne.n	8002aa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000030 	.word	0x20000030

08002b78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8c:	d111      	bne.n	8002bb2 <SPI_EndRxTransaction+0x3a>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b96:	d004      	beq.n	8002ba2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba0:	d107      	bne.n	8002bb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bba:	d12a      	bne.n	8002c12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc4:	d012      	beq.n	8002bec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff ff49 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d02d      	beq.n	8002c38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e026      	b.n	8002c3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff ff36 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01a      	beq.n	8002c38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e013      	b.n	8002c3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ff23 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e000      	b.n	8002c3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <SPI_EndRxTxTransaction+0x7c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <SPI_EndRxTxTransaction+0x80>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0d5b      	lsrs	r3, r3, #21
 8002c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6e:	d112      	bne.n	8002c96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff fef4 	bl	8002a68 <SPI_WaitFlagStateUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0220 	orr.w	r2, r3, #32
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e00f      	b.n	8002cb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d0f2      	beq.n	8002c96 <SPI_EndRxTxTransaction+0x52>
 8002cb0:	e000      	b.n	8002cb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cb2:	bf00      	nop
  }

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000030 	.word	0x20000030
 8002cc4:	165e9f81 	.word	0x165e9f81

08002cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e03f      	b.n	8002d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fb40 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f929 	bl	8002f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af02      	add	r7, sp, #8
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d17c      	bne.n	8002e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_UART_Transmit+0x2c>
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e075      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_UART_Transmit+0x3e>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e06e      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2221      	movs	r2, #33	; 0x21
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db6:	f7fd ffa3 	bl	8000d00 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd0:	d108      	bne.n	8002de4 <HAL_UART_Transmit+0x82>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002df4:	e02a      	b.n	8002e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f840 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e036      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e007      	b.n	8002e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1cf      	bne.n	8002df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f810 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e006      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b090      	sub	sp, #64	; 0x40
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	e050      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d04c      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ea6:	f7fd ff2b 	bl	8000d00 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d241      	bcs.n	8002f3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ed6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e5      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3314      	adds	r3, #20
 8002ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f0a:	623a      	str	r2, [r7, #32]
 8002f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	69f9      	ldr	r1, [r7, #28]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e5      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00f      	b.n	8002f5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d09f      	beq.n	8002e98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3740      	adds	r7, #64	; 0x40
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b0c0      	sub	sp, #256	; 0x100
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	68d9      	ldr	r1, [r3, #12]
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	ea40 0301 	orr.w	r3, r0, r1
 8002f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fbc:	f021 010c 	bic.w	r1, r1, #12
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	6999      	ldr	r1, [r3, #24]
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	ea40 0301 	orr.w	r3, r0, r1
 8002fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <UART_SetConfig+0x2cc>)
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d005      	beq.n	8003004 <UART_SetConfig+0xa0>
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	; (8003234 <UART_SetConfig+0x2d0>)
 8003000:	429a      	cmp	r2, r3
 8003002:	d104      	bne.n	800300e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7fe ff90 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8003008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800300c:	e003      	b.n	8003016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800300e:	f7fe ff77 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8003012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003020:	f040 810c 	bne.w	800323c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800302e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	1891      	adds	r1, r2, r2
 800303c:	65b9      	str	r1, [r7, #88]	; 0x58
 800303e:	415b      	adcs	r3, r3
 8003040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003046:	4621      	mov	r1, r4
 8003048:	eb12 0801 	adds.w	r8, r2, r1
 800304c:	4629      	mov	r1, r5
 800304e:	eb43 0901 	adc.w	r9, r3, r1
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003066:	4690      	mov	r8, r2
 8003068:	4699      	mov	r9, r3
 800306a:	4623      	mov	r3, r4
 800306c:	eb18 0303 	adds.w	r3, r8, r3
 8003070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003074:	462b      	mov	r3, r5
 8003076:	eb49 0303 	adc.w	r3, r9, r3
 800307a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800308a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800308e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003092:	460b      	mov	r3, r1
 8003094:	18db      	adds	r3, r3, r3
 8003096:	653b      	str	r3, [r7, #80]	; 0x50
 8003098:	4613      	mov	r3, r2
 800309a:	eb42 0303 	adc.w	r3, r2, r3
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
 80030a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030a8:	f7fd f8fa 	bl	80002a0 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <UART_SetConfig+0x2d4>)
 80030b2:	fba3 2302 	umull	r2, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	011c      	lsls	r4, r3, #4
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80030d4:	415b      	adcs	r3, r3
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030dc:	4641      	mov	r1, r8
 80030de:	eb12 0a01 	adds.w	sl, r2, r1
 80030e2:	4649      	mov	r1, r9
 80030e4:	eb43 0b01 	adc.w	fp, r3, r1
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030fc:	4692      	mov	sl, r2
 80030fe:	469b      	mov	fp, r3
 8003100:	4643      	mov	r3, r8
 8003102:	eb1a 0303 	adds.w	r3, sl, r3
 8003106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800310a:	464b      	mov	r3, r9
 800310c:	eb4b 0303 	adc.w	r3, fp, r3
 8003110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003128:	460b      	mov	r3, r1
 800312a:	18db      	adds	r3, r3, r3
 800312c:	643b      	str	r3, [r7, #64]	; 0x40
 800312e:	4613      	mov	r3, r2
 8003130:	eb42 0303 	adc.w	r3, r2, r3
 8003134:	647b      	str	r3, [r7, #68]	; 0x44
 8003136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800313a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800313e:	f7fd f8af 	bl	80002a0 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4611      	mov	r1, r2
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <UART_SetConfig+0x2d4>)
 800314a:	fba3 2301 	umull	r2, r3, r3, r1
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2264      	movs	r2, #100	; 0x64
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	1acb      	subs	r3, r1, r3
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <UART_SetConfig+0x2d4>)
 8003160:	fba3 2302 	umull	r2, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800316c:	441c      	add	r4, r3
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800317c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003180:	4642      	mov	r2, r8
 8003182:	464b      	mov	r3, r9
 8003184:	1891      	adds	r1, r2, r2
 8003186:	63b9      	str	r1, [r7, #56]	; 0x38
 8003188:	415b      	adcs	r3, r3
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003190:	4641      	mov	r1, r8
 8003192:	1851      	adds	r1, r2, r1
 8003194:	6339      	str	r1, [r7, #48]	; 0x30
 8003196:	4649      	mov	r1, r9
 8003198:	414b      	adcs	r3, r1
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031a8:	4659      	mov	r1, fp
 80031aa:	00cb      	lsls	r3, r1, #3
 80031ac:	4651      	mov	r1, sl
 80031ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b2:	4651      	mov	r1, sl
 80031b4:	00ca      	lsls	r2, r1, #3
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	4642      	mov	r2, r8
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031c4:	464b      	mov	r3, r9
 80031c6:	460a      	mov	r2, r1
 80031c8:	eb42 0303 	adc.w	r3, r2, r3
 80031cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031e4:	460b      	mov	r3, r1
 80031e6:	18db      	adds	r3, r3, r3
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ea:	4613      	mov	r3, r2
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031fa:	f7fd f851 	bl	80002a0 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <UART_SetConfig+0x2d4>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	; 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <UART_SetConfig+0x2d4>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 0207 	and.w	r2, r3, #7
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4422      	add	r2, r4
 800322a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800322c:	e105      	b.n	800343a <UART_SetConfig+0x4d6>
 800322e:	bf00      	nop
 8003230:	40011000 	.word	0x40011000
 8003234:	40011400 	.word	0x40011400
 8003238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800323c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800324a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800324e:	4642      	mov	r2, r8
 8003250:	464b      	mov	r3, r9
 8003252:	1891      	adds	r1, r2, r2
 8003254:	6239      	str	r1, [r7, #32]
 8003256:	415b      	adcs	r3, r3
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800325e:	4641      	mov	r1, r8
 8003260:	1854      	adds	r4, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb43 0501 	adc.w	r5, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003284:	464b      	mov	r3, r9
 8003286:	eb45 0303 	adc.w	r3, r5, r3
 800328a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800329a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032aa:	4629      	mov	r1, r5
 80032ac:	008b      	lsls	r3, r1, #2
 80032ae:	4621      	mov	r1, r4
 80032b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b4:	4621      	mov	r1, r4
 80032b6:	008a      	lsls	r2, r1, #2
 80032b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032bc:	f7fc fff0 	bl	80002a0 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b60      	ldr	r3, [pc, #384]	; (8003448 <UART_SetConfig+0x4e4>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	011c      	lsls	r4, r3, #4
 80032ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	61b9      	str	r1, [r7, #24]
 80032e8:	415b      	adcs	r3, r3
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f0:	4641      	mov	r1, r8
 80032f2:	1851      	adds	r1, r2, r1
 80032f4:	6139      	str	r1, [r7, #16]
 80032f6:	4649      	mov	r1, r9
 80032f8:	414b      	adcs	r3, r1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003308:	4659      	mov	r1, fp
 800330a:	00cb      	lsls	r3, r1, #3
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003312:	4651      	mov	r1, sl
 8003314:	00ca      	lsls	r2, r1, #3
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	4603      	mov	r3, r0
 800331c:	4642      	mov	r2, r8
 800331e:	189b      	adds	r3, r3, r2
 8003320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003324:	464b      	mov	r3, r9
 8003326:	460a      	mov	r2, r1
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	67bb      	str	r3, [r7, #120]	; 0x78
 800333a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003348:	4649      	mov	r1, r9
 800334a:	008b      	lsls	r3, r1, #2
 800334c:	4641      	mov	r1, r8
 800334e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003352:	4641      	mov	r1, r8
 8003354:	008a      	lsls	r2, r1, #2
 8003356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800335a:	f7fc ffa1 	bl	80002a0 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <UART_SetConfig+0x4e4>)
 8003364:	fba3 1302 	umull	r1, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2164      	movs	r1, #100	; 0x64
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	3332      	adds	r3, #50	; 0x32
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <UART_SetConfig+0x4e4>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003382:	441c      	add	r4, r3
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003388:	2200      	movs	r2, #0
 800338a:	673b      	str	r3, [r7, #112]	; 0x70
 800338c:	677a      	str	r2, [r7, #116]	; 0x74
 800338e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003392:	4642      	mov	r2, r8
 8003394:	464b      	mov	r3, r9
 8003396:	1891      	adds	r1, r2, r2
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	415b      	adcs	r3, r3
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a2:	4641      	mov	r1, r8
 80033a4:	1851      	adds	r1, r2, r1
 80033a6:	6039      	str	r1, [r7, #0]
 80033a8:	4649      	mov	r1, r9
 80033aa:	414b      	adcs	r3, r1
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033ba:	4659      	mov	r1, fp
 80033bc:	00cb      	lsls	r3, r1, #3
 80033be:	4651      	mov	r1, sl
 80033c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c4:	4651      	mov	r1, sl
 80033c6:	00ca      	lsls	r2, r1, #3
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	4603      	mov	r3, r0
 80033ce:	4642      	mov	r2, r8
 80033d0:	189b      	adds	r3, r3, r2
 80033d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d4:	464b      	mov	r3, r9
 80033d6:	460a      	mov	r2, r1
 80033d8:	eb42 0303 	adc.w	r3, r2, r3
 80033dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	663b      	str	r3, [r7, #96]	; 0x60
 80033e8:	667a      	str	r2, [r7, #100]	; 0x64
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033f6:	4649      	mov	r1, r9
 80033f8:	008b      	lsls	r3, r1, #2
 80033fa:	4641      	mov	r1, r8
 80033fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003400:	4641      	mov	r1, r8
 8003402:	008a      	lsls	r2, r1, #2
 8003404:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003408:	f7fc ff4a 	bl	80002a0 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <UART_SetConfig+0x4e4>)
 8003412:	fba3 1302 	umull	r1, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2164      	movs	r1, #100	; 0x64
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	3332      	adds	r3, #50	; 0x32
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <UART_SetConfig+0x4e4>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4422      	add	r2, r4
 8003438:	609a      	str	r2, [r3, #8]
}
 800343a:	bf00      	nop
 800343c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003440:	46bd      	mov	sp, r7
 8003442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003446:	bf00      	nop
 8003448:	51eb851f 	.word	0x51eb851f

0800344c <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 8003452:	f7fd fbf5 	bl	8000c40 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003456:	f000 f873 	bl	8003540 <SystemClock_Config>

	/* Initialize BSP Led for LED2 and LED3*/
	BSP_LED_Init(LED2);
 800345a:	2001      	movs	r0, #1
 800345c:	f7fd fa96 	bl	800098c <BSP_LED_Init>

	/* Initialize Debounce MEF */
	debounceFSM_init();
 8003460:	f7fd fa04 	bl	800086c <debounceFSM_init>

	/* Initialize UART port */
	if (!uartInit()) {
 8003464:	f7fd fa14 	bl	8000890 <uartInit>
 8003468:	4603      	mov	r3, r0
 800346a:	f083 0301 	eor.w	r3, r3, #1
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <main+0x2c>
		Error_Handler();
 8003474:	f000 f8c6 	bl	8003604 <Error_Handler>
	}

	/* Initialize ADS1293 device */
	if (!ads1293Init(0)) {
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd f893 	bl	80005a4 <ads1293Init>
 800347e:	4603      	mov	r3, r0
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <main+0x42>
		Error_Handler();
 800348a:	f000 f8bb 	bl	8003604 <Error_Handler>
	}

	/* Init CH1 CH2 ECG data conversion */
	ads1293Set3LeadECG();
 800348e:	f7fd f909 	bl	80006a4 <ads1293Set3LeadECG>

	/* ID data buffer */
	static uint8_t idData = 0;
	ads1293ReadID(&idData);
 8003492:	4825      	ldr	r0, [pc, #148]	; (8003528 <main+0xdc>)
 8003494:	f7fd f89e 	bl	80005d4 <ads1293ReadID>

	/* ID buffer string */
	static char message[50];

	uartSendString((uint8_t*) "Starting ADS1293 Main Programm:\r\n");
 8003498:	4824      	ldr	r0, [pc, #144]	; (800352c <main+0xe0>)
 800349a:	f7fd fa5d 	bl	8000958 <uartSendString>
	sprintf(message, "ADS1293 ID: 0x%x\r\n", idData);
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <main+0xdc>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	4922      	ldr	r1, [pc, #136]	; (8003530 <main+0xe4>)
 80034a6:	4823      	ldr	r0, [pc, #140]	; (8003534 <main+0xe8>)
 80034a8:	f000 f90a 	bl	80036c0 <siprintf>
	uartSendString((uint8_t*) message);
 80034ac:	4821      	ldr	r0, [pc, #132]	; (8003534 <main+0xe8>)
 80034ae:	f7fd fa53 	bl	8000958 <uartSendString>

	uint8_t ecgData[7];
	/* Infinite loop */
	while (1) {
		if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)) {
 80034b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034b6:	4820      	ldr	r0, [pc, #128]	; (8003538 <main+0xec>)
 80034b8:	f7fd ff10 	bl	80012dc <HAL_GPIO_ReadPin>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f7      	bne.n	80034b2 <main+0x66>
			ads1293ReadDataLoop(ecgData, 6);
 80034c2:	463b      	mov	r3, r7
 80034c4:	2106      	movs	r1, #6
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f92c 	bl	8000724 <ads1293ReadDataLoop>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[0]);
 80034cc:	783b      	ldrb	r3, [r7, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	491a      	ldr	r1, [pc, #104]	; (800353c <main+0xf0>)
 80034d2:	4818      	ldr	r0, [pc, #96]	; (8003534 <main+0xe8>)
 80034d4:	f000 f8f4 	bl	80036c0 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[1]);
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	461a      	mov	r2, r3
 80034dc:	4917      	ldr	r1, [pc, #92]	; (800353c <main+0xf0>)
 80034de:	4815      	ldr	r0, [pc, #84]	; (8003534 <main+0xe8>)
 80034e0:	f000 f8ee 	bl	80036c0 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[2]);
 80034e4:	78bb      	ldrb	r3, [r7, #2]
 80034e6:	461a      	mov	r2, r3
 80034e8:	4914      	ldr	r1, [pc, #80]	; (800353c <main+0xf0>)
 80034ea:	4812      	ldr	r0, [pc, #72]	; (8003534 <main+0xe8>)
 80034ec:	f000 f8e8 	bl	80036c0 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[3]);
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4911      	ldr	r1, [pc, #68]	; (800353c <main+0xf0>)
 80034f6:	480f      	ldr	r0, [pc, #60]	; (8003534 <main+0xe8>)
 80034f8:	f000 f8e2 	bl	80036c0 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[4]);
 80034fc:	793b      	ldrb	r3, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	490e      	ldr	r1, [pc, #56]	; (800353c <main+0xf0>)
 8003502:	480c      	ldr	r0, [pc, #48]	; (8003534 <main+0xe8>)
 8003504:	f000 f8dc 	bl	80036c0 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[5]);
 8003508:	797b      	ldrb	r3, [r7, #5]
 800350a:	461a      	mov	r2, r3
 800350c:	490b      	ldr	r1, [pc, #44]	; (800353c <main+0xf0>)
 800350e:	4809      	ldr	r0, [pc, #36]	; (8003534 <main+0xe8>)
 8003510:	f000 f8d6 	bl	80036c0 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[6]);
 8003514:	79bb      	ldrb	r3, [r7, #6]
 8003516:	461a      	mov	r2, r3
 8003518:	4908      	ldr	r1, [pc, #32]	; (800353c <main+0xf0>)
 800351a:	4806      	ldr	r0, [pc, #24]	; (8003534 <main+0xe8>)
 800351c:	f000 f8d0 	bl	80036c0 <siprintf>
			uartSendString((uint8_t*) message);
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <main+0xe8>)
 8003522:	f7fd fa19 	bl	8000958 <uartSendString>
		if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)) {
 8003526:	e7c4      	b.n	80034b2 <main+0x66>
 8003528:	20000164 	.word	0x20000164
 800352c:	08004060 	.word	0x08004060
 8003530:	08004084 	.word	0x08004084
 8003534:	20000168 	.word	0x20000168
 8003538:	40020c00 	.word	0x40020c00
 800353c:	08004098 	.word	0x08004098

08003540 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b094      	sub	sp, #80	; 0x50
 8003544:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <SystemClock_Config+0xbc>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <SystemClock_Config+0xbc>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <SystemClock_Config+0xbc>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <SystemClock_Config+0xc0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <SystemClock_Config+0xc0>)
 800356c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b23      	ldr	r3, [pc, #140]	; (8003600 <SystemClock_Config+0xc0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800357e:	2301      	movs	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003582:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003586:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003588:	2302      	movs	r3, #2
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800358c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003592:	2308      	movs	r3, #8
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003596:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800359a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800359c:	2302      	movs	r3, #2
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80035a0:	2307      	movs	r3, #7
 80035a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe f839 	bl	8001620 <HAL_RCC_OscConfig>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 80035b4:	f000 f826 	bl	8003604 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80035b8:	f7fd ffe2 	bl	8001580 <HAL_PWREx_EnableOverDrive>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 80035c2:	f000 f81f 	bl	8003604 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80035c6:	230f      	movs	r3, #15
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ca:	2302      	movs	r3, #2
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035ce:	2300      	movs	r3, #0
 80035d0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80035de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035e2:	2105      	movs	r1, #5
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fa93 	bl	8001b10 <HAL_RCC_ClockConfig>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 80035f0:	f000 f808 	bl	8003604 <Error_Handler>
	}
}
 80035f4:	bf00      	nop
 80035f6:	3750      	adds	r7, #80	; 0x50
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000

08003604 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	while (1) {
		BSP_LED_Toggle(LED2);
 8003608:	2001      	movs	r0, #1
 800360a:	f7fd fa0f 	bl	8000a2c <BSP_LED_Toggle>
		HAL_Delay(500);
 800360e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003612:	f7fd fb81 	bl	8000d18 <HAL_Delay>
		BSP_LED_Toggle(LED2);
 8003616:	e7f7      	b.n	8003608 <Error_Handler+0x4>

08003618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003650 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800361c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800361e:	e003      	b.n	8003628 <LoopCopyDataInit>

08003620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003626:	3104      	adds	r1, #4

08003628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003628:	480b      	ldr	r0, [pc, #44]	; (8003658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800362c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800362e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003630:	d3f6      	bcc.n	8003620 <CopyDataInit>
  ldr  r2, =_sbss
 8003632:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003634:	e002      	b.n	800363c <LoopFillZerobss>

08003636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003638:	f842 3b04 	str.w	r3, [r2], #4

0800363c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800363e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003640:	d3f9      	bcc.n	8003636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003642:	f7fd fa63 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003646:	f000 f817 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800364a:	f7ff feff 	bl	800344c <main>
  bx  lr    
 800364e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003650:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003654:	08004114 	.word	0x08004114
  ldr  r0, =_sdata
 8003658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800365c:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8003660:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8003664:	200001ac 	.word	0x200001ac

08003668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003668:	e7fe      	b.n	8003668 <ADC_IRQHandler>
	...

0800366c <__errno>:
 800366c:	4b01      	ldr	r3, [pc, #4]	; (8003674 <__errno+0x8>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000003c 	.word	0x2000003c

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	; (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	; (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	; (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x44>)
 800368c:	f000 fc86 	bl	8003f9c <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	0800410c 	.word	0x0800410c
 80036b4:	0800410c 	.word	0x0800410c
 80036b8:	0800410c 	.word	0x0800410c
 80036bc:	08004110 	.word	0x08004110

080036c0 <siprintf>:
 80036c0:	b40e      	push	{r1, r2, r3}
 80036c2:	b500      	push	{lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	ab1d      	add	r3, sp, #116	; 0x74
 80036c8:	9002      	str	r0, [sp, #8]
 80036ca:	9006      	str	r0, [sp, #24]
 80036cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036d0:	4809      	ldr	r0, [pc, #36]	; (80036f8 <siprintf+0x38>)
 80036d2:	9107      	str	r1, [sp, #28]
 80036d4:	9104      	str	r1, [sp, #16]
 80036d6:	4909      	ldr	r1, [pc, #36]	; (80036fc <siprintf+0x3c>)
 80036d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036dc:	9105      	str	r1, [sp, #20]
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	a902      	add	r1, sp, #8
 80036e4:	f000 f868 	bl	80037b8 <_svfiprintf_r>
 80036e8:	9b02      	ldr	r3, [sp, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	b01c      	add	sp, #112	; 0x70
 80036f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f4:	b003      	add	sp, #12
 80036f6:	4770      	bx	lr
 80036f8:	2000003c 	.word	0x2000003c
 80036fc:	ffff0208 	.word	0xffff0208

08003700 <__ssputs_r>:
 8003700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	688e      	ldr	r6, [r1, #8]
 8003706:	429e      	cmp	r6, r3
 8003708:	4682      	mov	sl, r0
 800370a:	460c      	mov	r4, r1
 800370c:	4690      	mov	r8, r2
 800370e:	461f      	mov	r7, r3
 8003710:	d838      	bhi.n	8003784 <__ssputs_r+0x84>
 8003712:	898a      	ldrh	r2, [r1, #12]
 8003714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003718:	d032      	beq.n	8003780 <__ssputs_r+0x80>
 800371a:	6825      	ldr	r5, [r4, #0]
 800371c:	6909      	ldr	r1, [r1, #16]
 800371e:	eba5 0901 	sub.w	r9, r5, r1
 8003722:	6965      	ldr	r5, [r4, #20]
 8003724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800372c:	3301      	adds	r3, #1
 800372e:	444b      	add	r3, r9
 8003730:	106d      	asrs	r5, r5, #1
 8003732:	429d      	cmp	r5, r3
 8003734:	bf38      	it	cc
 8003736:	461d      	movcc	r5, r3
 8003738:	0553      	lsls	r3, r2, #21
 800373a:	d531      	bpl.n	80037a0 <__ssputs_r+0xa0>
 800373c:	4629      	mov	r1, r5
 800373e:	f000 fb63 	bl	8003e08 <_malloc_r>
 8003742:	4606      	mov	r6, r0
 8003744:	b950      	cbnz	r0, 800375c <__ssputs_r+0x5c>
 8003746:	230c      	movs	r3, #12
 8003748:	f8ca 3000 	str.w	r3, [sl]
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375c:	6921      	ldr	r1, [r4, #16]
 800375e:	464a      	mov	r2, r9
 8003760:	f000 fabe 	bl	8003ce0 <memcpy>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800376a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	6126      	str	r6, [r4, #16]
 8003772:	6165      	str	r5, [r4, #20]
 8003774:	444e      	add	r6, r9
 8003776:	eba5 0509 	sub.w	r5, r5, r9
 800377a:	6026      	str	r6, [r4, #0]
 800377c:	60a5      	str	r5, [r4, #8]
 800377e:	463e      	mov	r6, r7
 8003780:	42be      	cmp	r6, r7
 8003782:	d900      	bls.n	8003786 <__ssputs_r+0x86>
 8003784:	463e      	mov	r6, r7
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	4632      	mov	r2, r6
 800378a:	4641      	mov	r1, r8
 800378c:	f000 fab6 	bl	8003cfc <memmove>
 8003790:	68a3      	ldr	r3, [r4, #8]
 8003792:	1b9b      	subs	r3, r3, r6
 8003794:	60a3      	str	r3, [r4, #8]
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	4433      	add	r3, r6
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	2000      	movs	r0, #0
 800379e:	e7db      	b.n	8003758 <__ssputs_r+0x58>
 80037a0:	462a      	mov	r2, r5
 80037a2:	f000 fba5 	bl	8003ef0 <_realloc_r>
 80037a6:	4606      	mov	r6, r0
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d1e1      	bne.n	8003770 <__ssputs_r+0x70>
 80037ac:	6921      	ldr	r1, [r4, #16]
 80037ae:	4650      	mov	r0, sl
 80037b0:	f000 fabe 	bl	8003d30 <_free_r>
 80037b4:	e7c7      	b.n	8003746 <__ssputs_r+0x46>
	...

080037b8 <_svfiprintf_r>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	4698      	mov	r8, r3
 80037be:	898b      	ldrh	r3, [r1, #12]
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	b09d      	sub	sp, #116	; 0x74
 80037c4:	4607      	mov	r7, r0
 80037c6:	460d      	mov	r5, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	d50e      	bpl.n	80037ea <_svfiprintf_r+0x32>
 80037cc:	690b      	ldr	r3, [r1, #16]
 80037ce:	b963      	cbnz	r3, 80037ea <_svfiprintf_r+0x32>
 80037d0:	2140      	movs	r1, #64	; 0x40
 80037d2:	f000 fb19 	bl	8003e08 <_malloc_r>
 80037d6:	6028      	str	r0, [r5, #0]
 80037d8:	6128      	str	r0, [r5, #16]
 80037da:	b920      	cbnz	r0, 80037e6 <_svfiprintf_r+0x2e>
 80037dc:	230c      	movs	r3, #12
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	e0d1      	b.n	800398a <_svfiprintf_r+0x1d2>
 80037e6:	2340      	movs	r3, #64	; 0x40
 80037e8:	616b      	str	r3, [r5, #20]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9309      	str	r3, [sp, #36]	; 0x24
 80037ee:	2320      	movs	r3, #32
 80037f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80037f8:	2330      	movs	r3, #48	; 0x30
 80037fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80039a4 <_svfiprintf_r+0x1ec>
 80037fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003802:	f04f 0901 	mov.w	r9, #1
 8003806:	4623      	mov	r3, r4
 8003808:	469a      	mov	sl, r3
 800380a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800380e:	b10a      	cbz	r2, 8003814 <_svfiprintf_r+0x5c>
 8003810:	2a25      	cmp	r2, #37	; 0x25
 8003812:	d1f9      	bne.n	8003808 <_svfiprintf_r+0x50>
 8003814:	ebba 0b04 	subs.w	fp, sl, r4
 8003818:	d00b      	beq.n	8003832 <_svfiprintf_r+0x7a>
 800381a:	465b      	mov	r3, fp
 800381c:	4622      	mov	r2, r4
 800381e:	4629      	mov	r1, r5
 8003820:	4638      	mov	r0, r7
 8003822:	f7ff ff6d 	bl	8003700 <__ssputs_r>
 8003826:	3001      	adds	r0, #1
 8003828:	f000 80aa 	beq.w	8003980 <_svfiprintf_r+0x1c8>
 800382c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800382e:	445a      	add	r2, fp
 8003830:	9209      	str	r2, [sp, #36]	; 0x24
 8003832:	f89a 3000 	ldrb.w	r3, [sl]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80a2 	beq.w	8003980 <_svfiprintf_r+0x1c8>
 800383c:	2300      	movs	r3, #0
 800383e:	f04f 32ff 	mov.w	r2, #4294967295
 8003842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003846:	f10a 0a01 	add.w	sl, sl, #1
 800384a:	9304      	str	r3, [sp, #16]
 800384c:	9307      	str	r3, [sp, #28]
 800384e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003852:	931a      	str	r3, [sp, #104]	; 0x68
 8003854:	4654      	mov	r4, sl
 8003856:	2205      	movs	r2, #5
 8003858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800385c:	4851      	ldr	r0, [pc, #324]	; (80039a4 <_svfiprintf_r+0x1ec>)
 800385e:	f7fc fccf 	bl	8000200 <memchr>
 8003862:	9a04      	ldr	r2, [sp, #16]
 8003864:	b9d8      	cbnz	r0, 800389e <_svfiprintf_r+0xe6>
 8003866:	06d0      	lsls	r0, r2, #27
 8003868:	bf44      	itt	mi
 800386a:	2320      	movmi	r3, #32
 800386c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003870:	0711      	lsls	r1, r2, #28
 8003872:	bf44      	itt	mi
 8003874:	232b      	movmi	r3, #43	; 0x2b
 8003876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800387a:	f89a 3000 	ldrb.w	r3, [sl]
 800387e:	2b2a      	cmp	r3, #42	; 0x2a
 8003880:	d015      	beq.n	80038ae <_svfiprintf_r+0xf6>
 8003882:	9a07      	ldr	r2, [sp, #28]
 8003884:	4654      	mov	r4, sl
 8003886:	2000      	movs	r0, #0
 8003888:	f04f 0c0a 	mov.w	ip, #10
 800388c:	4621      	mov	r1, r4
 800388e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003892:	3b30      	subs	r3, #48	; 0x30
 8003894:	2b09      	cmp	r3, #9
 8003896:	d94e      	bls.n	8003936 <_svfiprintf_r+0x17e>
 8003898:	b1b0      	cbz	r0, 80038c8 <_svfiprintf_r+0x110>
 800389a:	9207      	str	r2, [sp, #28]
 800389c:	e014      	b.n	80038c8 <_svfiprintf_r+0x110>
 800389e:	eba0 0308 	sub.w	r3, r0, r8
 80038a2:	fa09 f303 	lsl.w	r3, r9, r3
 80038a6:	4313      	orrs	r3, r2
 80038a8:	9304      	str	r3, [sp, #16]
 80038aa:	46a2      	mov	sl, r4
 80038ac:	e7d2      	b.n	8003854 <_svfiprintf_r+0x9c>
 80038ae:	9b03      	ldr	r3, [sp, #12]
 80038b0:	1d19      	adds	r1, r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	9103      	str	r1, [sp, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bfbb      	ittet	lt
 80038ba:	425b      	neglt	r3, r3
 80038bc:	f042 0202 	orrlt.w	r2, r2, #2
 80038c0:	9307      	strge	r3, [sp, #28]
 80038c2:	9307      	strlt	r3, [sp, #28]
 80038c4:	bfb8      	it	lt
 80038c6:	9204      	strlt	r2, [sp, #16]
 80038c8:	7823      	ldrb	r3, [r4, #0]
 80038ca:	2b2e      	cmp	r3, #46	; 0x2e
 80038cc:	d10c      	bne.n	80038e8 <_svfiprintf_r+0x130>
 80038ce:	7863      	ldrb	r3, [r4, #1]
 80038d0:	2b2a      	cmp	r3, #42	; 0x2a
 80038d2:	d135      	bne.n	8003940 <_svfiprintf_r+0x188>
 80038d4:	9b03      	ldr	r3, [sp, #12]
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	9203      	str	r2, [sp, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bfb8      	it	lt
 80038e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80038e4:	3402      	adds	r4, #2
 80038e6:	9305      	str	r3, [sp, #20]
 80038e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039b4 <_svfiprintf_r+0x1fc>
 80038ec:	7821      	ldrb	r1, [r4, #0]
 80038ee:	2203      	movs	r2, #3
 80038f0:	4650      	mov	r0, sl
 80038f2:	f7fc fc85 	bl	8000200 <memchr>
 80038f6:	b140      	cbz	r0, 800390a <_svfiprintf_r+0x152>
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	eba0 000a 	sub.w	r0, r0, sl
 80038fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003902:	9b04      	ldr	r3, [sp, #16]
 8003904:	4303      	orrs	r3, r0
 8003906:	3401      	adds	r4, #1
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800390e:	4826      	ldr	r0, [pc, #152]	; (80039a8 <_svfiprintf_r+0x1f0>)
 8003910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003914:	2206      	movs	r2, #6
 8003916:	f7fc fc73 	bl	8000200 <memchr>
 800391a:	2800      	cmp	r0, #0
 800391c:	d038      	beq.n	8003990 <_svfiprintf_r+0x1d8>
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <_svfiprintf_r+0x1f4>)
 8003920:	bb1b      	cbnz	r3, 800396a <_svfiprintf_r+0x1b2>
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	3307      	adds	r3, #7
 8003926:	f023 0307 	bic.w	r3, r3, #7
 800392a:	3308      	adds	r3, #8
 800392c:	9303      	str	r3, [sp, #12]
 800392e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003930:	4433      	add	r3, r6
 8003932:	9309      	str	r3, [sp, #36]	; 0x24
 8003934:	e767      	b.n	8003806 <_svfiprintf_r+0x4e>
 8003936:	fb0c 3202 	mla	r2, ip, r2, r3
 800393a:	460c      	mov	r4, r1
 800393c:	2001      	movs	r0, #1
 800393e:	e7a5      	b.n	800388c <_svfiprintf_r+0xd4>
 8003940:	2300      	movs	r3, #0
 8003942:	3401      	adds	r4, #1
 8003944:	9305      	str	r3, [sp, #20]
 8003946:	4619      	mov	r1, r3
 8003948:	f04f 0c0a 	mov.w	ip, #10
 800394c:	4620      	mov	r0, r4
 800394e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003952:	3a30      	subs	r2, #48	; 0x30
 8003954:	2a09      	cmp	r2, #9
 8003956:	d903      	bls.n	8003960 <_svfiprintf_r+0x1a8>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0c5      	beq.n	80038e8 <_svfiprintf_r+0x130>
 800395c:	9105      	str	r1, [sp, #20]
 800395e:	e7c3      	b.n	80038e8 <_svfiprintf_r+0x130>
 8003960:	fb0c 2101 	mla	r1, ip, r1, r2
 8003964:	4604      	mov	r4, r0
 8003966:	2301      	movs	r3, #1
 8003968:	e7f0      	b.n	800394c <_svfiprintf_r+0x194>
 800396a:	ab03      	add	r3, sp, #12
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	462a      	mov	r2, r5
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <_svfiprintf_r+0x1f8>)
 8003972:	a904      	add	r1, sp, #16
 8003974:	4638      	mov	r0, r7
 8003976:	f3af 8000 	nop.w
 800397a:	1c42      	adds	r2, r0, #1
 800397c:	4606      	mov	r6, r0
 800397e:	d1d6      	bne.n	800392e <_svfiprintf_r+0x176>
 8003980:	89ab      	ldrh	r3, [r5, #12]
 8003982:	065b      	lsls	r3, r3, #25
 8003984:	f53f af2c 	bmi.w	80037e0 <_svfiprintf_r+0x28>
 8003988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800398a:	b01d      	add	sp, #116	; 0x74
 800398c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003990:	ab03      	add	r3, sp, #12
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	462a      	mov	r2, r5
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <_svfiprintf_r+0x1f8>)
 8003998:	a904      	add	r1, sp, #16
 800399a:	4638      	mov	r0, r7
 800399c:	f000 f87a 	bl	8003a94 <_printf_i>
 80039a0:	e7eb      	b.n	800397a <_svfiprintf_r+0x1c2>
 80039a2:	bf00      	nop
 80039a4:	080040d0 	.word	0x080040d0
 80039a8:	080040da 	.word	0x080040da
 80039ac:	00000000 	.word	0x00000000
 80039b0:	08003701 	.word	0x08003701
 80039b4:	080040d6 	.word	0x080040d6

080039b8 <_printf_common>:
 80039b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	4616      	mov	r6, r2
 80039be:	4699      	mov	r9, r3
 80039c0:	688a      	ldr	r2, [r1, #8]
 80039c2:	690b      	ldr	r3, [r1, #16]
 80039c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039c8:	4293      	cmp	r3, r2
 80039ca:	bfb8      	it	lt
 80039cc:	4613      	movlt	r3, r2
 80039ce:	6033      	str	r3, [r6, #0]
 80039d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039d4:	4607      	mov	r7, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	b10a      	cbz	r2, 80039de <_printf_common+0x26>
 80039da:	3301      	adds	r3, #1
 80039dc:	6033      	str	r3, [r6, #0]
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	0699      	lsls	r1, r3, #26
 80039e2:	bf42      	ittt	mi
 80039e4:	6833      	ldrmi	r3, [r6, #0]
 80039e6:	3302      	addmi	r3, #2
 80039e8:	6033      	strmi	r3, [r6, #0]
 80039ea:	6825      	ldr	r5, [r4, #0]
 80039ec:	f015 0506 	ands.w	r5, r5, #6
 80039f0:	d106      	bne.n	8003a00 <_printf_common+0x48>
 80039f2:	f104 0a19 	add.w	sl, r4, #25
 80039f6:	68e3      	ldr	r3, [r4, #12]
 80039f8:	6832      	ldr	r2, [r6, #0]
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	42ab      	cmp	r3, r5
 80039fe:	dc26      	bgt.n	8003a4e <_printf_common+0x96>
 8003a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a04:	1e13      	subs	r3, r2, #0
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	bf18      	it	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	0692      	lsls	r2, r2, #26
 8003a0e:	d42b      	bmi.n	8003a68 <_printf_common+0xb0>
 8003a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a14:	4649      	mov	r1, r9
 8003a16:	4638      	mov	r0, r7
 8003a18:	47c0      	blx	r8
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d01e      	beq.n	8003a5c <_printf_common+0xa4>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	68e5      	ldr	r5, [r4, #12]
 8003a22:	6832      	ldr	r2, [r6, #0]
 8003a24:	f003 0306 	and.w	r3, r3, #6
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	bf08      	it	eq
 8003a2c:	1aad      	subeq	r5, r5, r2
 8003a2e:	68a3      	ldr	r3, [r4, #8]
 8003a30:	6922      	ldr	r2, [r4, #16]
 8003a32:	bf0c      	ite	eq
 8003a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a38:	2500      	movne	r5, #0
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	bfc4      	itt	gt
 8003a3e:	1a9b      	subgt	r3, r3, r2
 8003a40:	18ed      	addgt	r5, r5, r3
 8003a42:	2600      	movs	r6, #0
 8003a44:	341a      	adds	r4, #26
 8003a46:	42b5      	cmp	r5, r6
 8003a48:	d11a      	bne.n	8003a80 <_printf_common+0xc8>
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	e008      	b.n	8003a60 <_printf_common+0xa8>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4652      	mov	r2, sl
 8003a52:	4649      	mov	r1, r9
 8003a54:	4638      	mov	r0, r7
 8003a56:	47c0      	blx	r8
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d103      	bne.n	8003a64 <_printf_common+0xac>
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a64:	3501      	adds	r5, #1
 8003a66:	e7c6      	b.n	80039f6 <_printf_common+0x3e>
 8003a68:	18e1      	adds	r1, r4, r3
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	2030      	movs	r0, #48	; 0x30
 8003a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a72:	4422      	add	r2, r4
 8003a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	e7c7      	b.n	8003a10 <_printf_common+0x58>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4622      	mov	r2, r4
 8003a84:	4649      	mov	r1, r9
 8003a86:	4638      	mov	r0, r7
 8003a88:	47c0      	blx	r8
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d0e6      	beq.n	8003a5c <_printf_common+0xa4>
 8003a8e:	3601      	adds	r6, #1
 8003a90:	e7d9      	b.n	8003a46 <_printf_common+0x8e>
	...

08003a94 <_printf_i>:
 8003a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a98:	7e0f      	ldrb	r7, [r1, #24]
 8003a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a9c:	2f78      	cmp	r7, #120	; 0x78
 8003a9e:	4691      	mov	r9, r2
 8003aa0:	4680      	mov	r8, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	469a      	mov	sl, r3
 8003aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aaa:	d807      	bhi.n	8003abc <_printf_i+0x28>
 8003aac:	2f62      	cmp	r7, #98	; 0x62
 8003aae:	d80a      	bhi.n	8003ac6 <_printf_i+0x32>
 8003ab0:	2f00      	cmp	r7, #0
 8003ab2:	f000 80d8 	beq.w	8003c66 <_printf_i+0x1d2>
 8003ab6:	2f58      	cmp	r7, #88	; 0x58
 8003ab8:	f000 80a3 	beq.w	8003c02 <_printf_i+0x16e>
 8003abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ac4:	e03a      	b.n	8003b3c <_printf_i+0xa8>
 8003ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aca:	2b15      	cmp	r3, #21
 8003acc:	d8f6      	bhi.n	8003abc <_printf_i+0x28>
 8003ace:	a101      	add	r1, pc, #4	; (adr r1, 8003ad4 <_printf_i+0x40>)
 8003ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ad4:	08003b2d 	.word	0x08003b2d
 8003ad8:	08003b41 	.word	0x08003b41
 8003adc:	08003abd 	.word	0x08003abd
 8003ae0:	08003abd 	.word	0x08003abd
 8003ae4:	08003abd 	.word	0x08003abd
 8003ae8:	08003abd 	.word	0x08003abd
 8003aec:	08003b41 	.word	0x08003b41
 8003af0:	08003abd 	.word	0x08003abd
 8003af4:	08003abd 	.word	0x08003abd
 8003af8:	08003abd 	.word	0x08003abd
 8003afc:	08003abd 	.word	0x08003abd
 8003b00:	08003c4d 	.word	0x08003c4d
 8003b04:	08003b71 	.word	0x08003b71
 8003b08:	08003c2f 	.word	0x08003c2f
 8003b0c:	08003abd 	.word	0x08003abd
 8003b10:	08003abd 	.word	0x08003abd
 8003b14:	08003c6f 	.word	0x08003c6f
 8003b18:	08003abd 	.word	0x08003abd
 8003b1c:	08003b71 	.word	0x08003b71
 8003b20:	08003abd 	.word	0x08003abd
 8003b24:	08003abd 	.word	0x08003abd
 8003b28:	08003c37 	.word	0x08003c37
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	1d1a      	adds	r2, r3, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	602a      	str	r2, [r5, #0]
 8003b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0a3      	b.n	8003c88 <_printf_i+0x1f4>
 8003b40:	6820      	ldr	r0, [r4, #0]
 8003b42:	6829      	ldr	r1, [r5, #0]
 8003b44:	0606      	lsls	r6, r0, #24
 8003b46:	f101 0304 	add.w	r3, r1, #4
 8003b4a:	d50a      	bpl.n	8003b62 <_printf_i+0xce>
 8003b4c:	680e      	ldr	r6, [r1, #0]
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	2e00      	cmp	r6, #0
 8003b52:	da03      	bge.n	8003b5c <_printf_i+0xc8>
 8003b54:	232d      	movs	r3, #45	; 0x2d
 8003b56:	4276      	negs	r6, r6
 8003b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b5c:	485e      	ldr	r0, [pc, #376]	; (8003cd8 <_printf_i+0x244>)
 8003b5e:	230a      	movs	r3, #10
 8003b60:	e019      	b.n	8003b96 <_printf_i+0x102>
 8003b62:	680e      	ldr	r6, [r1, #0]
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b6a:	bf18      	it	ne
 8003b6c:	b236      	sxthne	r6, r6
 8003b6e:	e7ef      	b.n	8003b50 <_printf_i+0xbc>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	6820      	ldr	r0, [r4, #0]
 8003b74:	1d19      	adds	r1, r3, #4
 8003b76:	6029      	str	r1, [r5, #0]
 8003b78:	0601      	lsls	r1, r0, #24
 8003b7a:	d501      	bpl.n	8003b80 <_printf_i+0xec>
 8003b7c:	681e      	ldr	r6, [r3, #0]
 8003b7e:	e002      	b.n	8003b86 <_printf_i+0xf2>
 8003b80:	0646      	lsls	r6, r0, #25
 8003b82:	d5fb      	bpl.n	8003b7c <_printf_i+0xe8>
 8003b84:	881e      	ldrh	r6, [r3, #0]
 8003b86:	4854      	ldr	r0, [pc, #336]	; (8003cd8 <_printf_i+0x244>)
 8003b88:	2f6f      	cmp	r7, #111	; 0x6f
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2308      	moveq	r3, #8
 8003b8e:	230a      	movne	r3, #10
 8003b90:	2100      	movs	r1, #0
 8003b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b96:	6865      	ldr	r5, [r4, #4]
 8003b98:	60a5      	str	r5, [r4, #8]
 8003b9a:	2d00      	cmp	r5, #0
 8003b9c:	bfa2      	ittt	ge
 8003b9e:	6821      	ldrge	r1, [r4, #0]
 8003ba0:	f021 0104 	bicge.w	r1, r1, #4
 8003ba4:	6021      	strge	r1, [r4, #0]
 8003ba6:	b90e      	cbnz	r6, 8003bac <_printf_i+0x118>
 8003ba8:	2d00      	cmp	r5, #0
 8003baa:	d04d      	beq.n	8003c48 <_printf_i+0x1b4>
 8003bac:	4615      	mov	r5, r2
 8003bae:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bb2:	fb03 6711 	mls	r7, r3, r1, r6
 8003bb6:	5dc7      	ldrb	r7, [r0, r7]
 8003bb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bbc:	4637      	mov	r7, r6
 8003bbe:	42bb      	cmp	r3, r7
 8003bc0:	460e      	mov	r6, r1
 8003bc2:	d9f4      	bls.n	8003bae <_printf_i+0x11a>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d10b      	bne.n	8003be0 <_printf_i+0x14c>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	07de      	lsls	r6, r3, #31
 8003bcc:	d508      	bpl.n	8003be0 <_printf_i+0x14c>
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	6861      	ldr	r1, [r4, #4]
 8003bd2:	4299      	cmp	r1, r3
 8003bd4:	bfde      	ittt	le
 8003bd6:	2330      	movle	r3, #48	; 0x30
 8003bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003be0:	1b52      	subs	r2, r2, r5
 8003be2:	6122      	str	r2, [r4, #16]
 8003be4:	f8cd a000 	str.w	sl, [sp]
 8003be8:	464b      	mov	r3, r9
 8003bea:	aa03      	add	r2, sp, #12
 8003bec:	4621      	mov	r1, r4
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f7ff fee2 	bl	80039b8 <_printf_common>
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	d14c      	bne.n	8003c92 <_printf_i+0x1fe>
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	b004      	add	sp, #16
 8003bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c02:	4835      	ldr	r0, [pc, #212]	; (8003cd8 <_printf_i+0x244>)
 8003c04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c08:	6829      	ldr	r1, [r5, #0]
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c10:	6029      	str	r1, [r5, #0]
 8003c12:	061d      	lsls	r5, r3, #24
 8003c14:	d514      	bpl.n	8003c40 <_printf_i+0x1ac>
 8003c16:	07df      	lsls	r7, r3, #31
 8003c18:	bf44      	itt	mi
 8003c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003c1e:	6023      	strmi	r3, [r4, #0]
 8003c20:	b91e      	cbnz	r6, 8003c2a <_printf_i+0x196>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	f023 0320 	bic.w	r3, r3, #32
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	e7b0      	b.n	8003b90 <_printf_i+0xfc>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	f043 0320 	orr.w	r3, r3, #32
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	2378      	movs	r3, #120	; 0x78
 8003c38:	4828      	ldr	r0, [pc, #160]	; (8003cdc <_printf_i+0x248>)
 8003c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c3e:	e7e3      	b.n	8003c08 <_printf_i+0x174>
 8003c40:	0659      	lsls	r1, r3, #25
 8003c42:	bf48      	it	mi
 8003c44:	b2b6      	uxthmi	r6, r6
 8003c46:	e7e6      	b.n	8003c16 <_printf_i+0x182>
 8003c48:	4615      	mov	r5, r2
 8003c4a:	e7bb      	b.n	8003bc4 <_printf_i+0x130>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	6826      	ldr	r6, [r4, #0]
 8003c50:	6961      	ldr	r1, [r4, #20]
 8003c52:	1d18      	adds	r0, r3, #4
 8003c54:	6028      	str	r0, [r5, #0]
 8003c56:	0635      	lsls	r5, r6, #24
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	d501      	bpl.n	8003c60 <_printf_i+0x1cc>
 8003c5c:	6019      	str	r1, [r3, #0]
 8003c5e:	e002      	b.n	8003c66 <_printf_i+0x1d2>
 8003c60:	0670      	lsls	r0, r6, #25
 8003c62:	d5fb      	bpl.n	8003c5c <_printf_i+0x1c8>
 8003c64:	8019      	strh	r1, [r3, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	6123      	str	r3, [r4, #16]
 8003c6a:	4615      	mov	r5, r2
 8003c6c:	e7ba      	b.n	8003be4 <_printf_i+0x150>
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	1d1a      	adds	r2, r3, #4
 8003c72:	602a      	str	r2, [r5, #0]
 8003c74:	681d      	ldr	r5, [r3, #0]
 8003c76:	6862      	ldr	r2, [r4, #4]
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7fc fac0 	bl	8000200 <memchr>
 8003c80:	b108      	cbz	r0, 8003c86 <_printf_i+0x1f2>
 8003c82:	1b40      	subs	r0, r0, r5
 8003c84:	6060      	str	r0, [r4, #4]
 8003c86:	6863      	ldr	r3, [r4, #4]
 8003c88:	6123      	str	r3, [r4, #16]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c90:	e7a8      	b.n	8003be4 <_printf_i+0x150>
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	462a      	mov	r2, r5
 8003c96:	4649      	mov	r1, r9
 8003c98:	4640      	mov	r0, r8
 8003c9a:	47d0      	blx	sl
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d0ab      	beq.n	8003bf8 <_printf_i+0x164>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	079b      	lsls	r3, r3, #30
 8003ca4:	d413      	bmi.n	8003cce <_printf_i+0x23a>
 8003ca6:	68e0      	ldr	r0, [r4, #12]
 8003ca8:	9b03      	ldr	r3, [sp, #12]
 8003caa:	4298      	cmp	r0, r3
 8003cac:	bfb8      	it	lt
 8003cae:	4618      	movlt	r0, r3
 8003cb0:	e7a4      	b.n	8003bfc <_printf_i+0x168>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4632      	mov	r2, r6
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	4640      	mov	r0, r8
 8003cba:	47d0      	blx	sl
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d09b      	beq.n	8003bf8 <_printf_i+0x164>
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	68e3      	ldr	r3, [r4, #12]
 8003cc4:	9903      	ldr	r1, [sp, #12]
 8003cc6:	1a5b      	subs	r3, r3, r1
 8003cc8:	42ab      	cmp	r3, r5
 8003cca:	dcf2      	bgt.n	8003cb2 <_printf_i+0x21e>
 8003ccc:	e7eb      	b.n	8003ca6 <_printf_i+0x212>
 8003cce:	2500      	movs	r5, #0
 8003cd0:	f104 0619 	add.w	r6, r4, #25
 8003cd4:	e7f5      	b.n	8003cc2 <_printf_i+0x22e>
 8003cd6:	bf00      	nop
 8003cd8:	080040e1 	.word	0x080040e1
 8003cdc:	080040f2 	.word	0x080040f2

08003ce0 <memcpy>:
 8003ce0:	440a      	add	r2, r1
 8003ce2:	4291      	cmp	r1, r2
 8003ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ce8:	d100      	bne.n	8003cec <memcpy+0xc>
 8003cea:	4770      	bx	lr
 8003cec:	b510      	push	{r4, lr}
 8003cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cf6:	4291      	cmp	r1, r2
 8003cf8:	d1f9      	bne.n	8003cee <memcpy+0xe>
 8003cfa:	bd10      	pop	{r4, pc}

08003cfc <memmove>:
 8003cfc:	4288      	cmp	r0, r1
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	eb01 0402 	add.w	r4, r1, r2
 8003d04:	d902      	bls.n	8003d0c <memmove+0x10>
 8003d06:	4284      	cmp	r4, r0
 8003d08:	4623      	mov	r3, r4
 8003d0a:	d807      	bhi.n	8003d1c <memmove+0x20>
 8003d0c:	1e43      	subs	r3, r0, #1
 8003d0e:	42a1      	cmp	r1, r4
 8003d10:	d008      	beq.n	8003d24 <memmove+0x28>
 8003d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d1a:	e7f8      	b.n	8003d0e <memmove+0x12>
 8003d1c:	4402      	add	r2, r0
 8003d1e:	4601      	mov	r1, r0
 8003d20:	428a      	cmp	r2, r1
 8003d22:	d100      	bne.n	8003d26 <memmove+0x2a>
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d2e:	e7f7      	b.n	8003d20 <memmove+0x24>

08003d30 <_free_r>:
 8003d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d32:	2900      	cmp	r1, #0
 8003d34:	d044      	beq.n	8003dc0 <_free_r+0x90>
 8003d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3a:	9001      	str	r0, [sp, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8003d42:	bfb8      	it	lt
 8003d44:	18e4      	addlt	r4, r4, r3
 8003d46:	f000 f913 	bl	8003f70 <__malloc_lock>
 8003d4a:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <_free_r+0x94>)
 8003d4c:	9801      	ldr	r0, [sp, #4]
 8003d4e:	6813      	ldr	r3, [r2, #0]
 8003d50:	b933      	cbnz	r3, 8003d60 <_free_r+0x30>
 8003d52:	6063      	str	r3, [r4, #4]
 8003d54:	6014      	str	r4, [r2, #0]
 8003d56:	b003      	add	sp, #12
 8003d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d5c:	f000 b90e 	b.w	8003f7c <__malloc_unlock>
 8003d60:	42a3      	cmp	r3, r4
 8003d62:	d908      	bls.n	8003d76 <_free_r+0x46>
 8003d64:	6825      	ldr	r5, [r4, #0]
 8003d66:	1961      	adds	r1, r4, r5
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	bf01      	itttt	eq
 8003d6c:	6819      	ldreq	r1, [r3, #0]
 8003d6e:	685b      	ldreq	r3, [r3, #4]
 8003d70:	1949      	addeq	r1, r1, r5
 8003d72:	6021      	streq	r1, [r4, #0]
 8003d74:	e7ed      	b.n	8003d52 <_free_r+0x22>
 8003d76:	461a      	mov	r2, r3
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b10b      	cbz	r3, 8003d80 <_free_r+0x50>
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	d9fa      	bls.n	8003d76 <_free_r+0x46>
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	1855      	adds	r5, r2, r1
 8003d84:	42a5      	cmp	r5, r4
 8003d86:	d10b      	bne.n	8003da0 <_free_r+0x70>
 8003d88:	6824      	ldr	r4, [r4, #0]
 8003d8a:	4421      	add	r1, r4
 8003d8c:	1854      	adds	r4, r2, r1
 8003d8e:	42a3      	cmp	r3, r4
 8003d90:	6011      	str	r1, [r2, #0]
 8003d92:	d1e0      	bne.n	8003d56 <_free_r+0x26>
 8003d94:	681c      	ldr	r4, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	6053      	str	r3, [r2, #4]
 8003d9a:	4421      	add	r1, r4
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	e7da      	b.n	8003d56 <_free_r+0x26>
 8003da0:	d902      	bls.n	8003da8 <_free_r+0x78>
 8003da2:	230c      	movs	r3, #12
 8003da4:	6003      	str	r3, [r0, #0]
 8003da6:	e7d6      	b.n	8003d56 <_free_r+0x26>
 8003da8:	6825      	ldr	r5, [r4, #0]
 8003daa:	1961      	adds	r1, r4, r5
 8003dac:	428b      	cmp	r3, r1
 8003dae:	bf04      	itt	eq
 8003db0:	6819      	ldreq	r1, [r3, #0]
 8003db2:	685b      	ldreq	r3, [r3, #4]
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	bf04      	itt	eq
 8003db8:	1949      	addeq	r1, r1, r5
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	6054      	str	r4, [r2, #4]
 8003dbe:	e7ca      	b.n	8003d56 <_free_r+0x26>
 8003dc0:	b003      	add	sp, #12
 8003dc2:	bd30      	pop	{r4, r5, pc}
 8003dc4:	2000019c 	.word	0x2000019c

08003dc8 <sbrk_aligned>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4e0e      	ldr	r6, [pc, #56]	; (8003e04 <sbrk_aligned+0x3c>)
 8003dcc:	460c      	mov	r4, r1
 8003dce:	6831      	ldr	r1, [r6, #0]
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	b911      	cbnz	r1, 8003dda <sbrk_aligned+0x12>
 8003dd4:	f000 f8bc 	bl	8003f50 <_sbrk_r>
 8003dd8:	6030      	str	r0, [r6, #0]
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f8b7 	bl	8003f50 <_sbrk_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	d00a      	beq.n	8003dfc <sbrk_aligned+0x34>
 8003de6:	1cc4      	adds	r4, r0, #3
 8003de8:	f024 0403 	bic.w	r4, r4, #3
 8003dec:	42a0      	cmp	r0, r4
 8003dee:	d007      	beq.n	8003e00 <sbrk_aligned+0x38>
 8003df0:	1a21      	subs	r1, r4, r0
 8003df2:	4628      	mov	r0, r5
 8003df4:	f000 f8ac 	bl	8003f50 <_sbrk_r>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d101      	bne.n	8003e00 <sbrk_aligned+0x38>
 8003dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8003e00:	4620      	mov	r0, r4
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	200001a0 	.word	0x200001a0

08003e08 <_malloc_r>:
 8003e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0c:	1ccd      	adds	r5, r1, #3
 8003e0e:	f025 0503 	bic.w	r5, r5, #3
 8003e12:	3508      	adds	r5, #8
 8003e14:	2d0c      	cmp	r5, #12
 8003e16:	bf38      	it	cc
 8003e18:	250c      	movcc	r5, #12
 8003e1a:	2d00      	cmp	r5, #0
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	db01      	blt.n	8003e24 <_malloc_r+0x1c>
 8003e20:	42a9      	cmp	r1, r5
 8003e22:	d905      	bls.n	8003e30 <_malloc_r+0x28>
 8003e24:	230c      	movs	r3, #12
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	2600      	movs	r6, #0
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e30:	4e2e      	ldr	r6, [pc, #184]	; (8003eec <_malloc_r+0xe4>)
 8003e32:	f000 f89d 	bl	8003f70 <__malloc_lock>
 8003e36:	6833      	ldr	r3, [r6, #0]
 8003e38:	461c      	mov	r4, r3
 8003e3a:	bb34      	cbnz	r4, 8003e8a <_malloc_r+0x82>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4638      	mov	r0, r7
 8003e40:	f7ff ffc2 	bl	8003dc8 <sbrk_aligned>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	4604      	mov	r4, r0
 8003e48:	d14d      	bne.n	8003ee6 <_malloc_r+0xde>
 8003e4a:	6834      	ldr	r4, [r6, #0]
 8003e4c:	4626      	mov	r6, r4
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d140      	bne.n	8003ed4 <_malloc_r+0xcc>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	4631      	mov	r1, r6
 8003e56:	4638      	mov	r0, r7
 8003e58:	eb04 0803 	add.w	r8, r4, r3
 8003e5c:	f000 f878 	bl	8003f50 <_sbrk_r>
 8003e60:	4580      	cmp	r8, r0
 8003e62:	d13a      	bne.n	8003eda <_malloc_r+0xd2>
 8003e64:	6821      	ldr	r1, [r4, #0]
 8003e66:	3503      	adds	r5, #3
 8003e68:	1a6d      	subs	r5, r5, r1
 8003e6a:	f025 0503 	bic.w	r5, r5, #3
 8003e6e:	3508      	adds	r5, #8
 8003e70:	2d0c      	cmp	r5, #12
 8003e72:	bf38      	it	cc
 8003e74:	250c      	movcc	r5, #12
 8003e76:	4629      	mov	r1, r5
 8003e78:	4638      	mov	r0, r7
 8003e7a:	f7ff ffa5 	bl	8003dc8 <sbrk_aligned>
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d02b      	beq.n	8003eda <_malloc_r+0xd2>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	442b      	add	r3, r5
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	e00e      	b.n	8003ea8 <_malloc_r+0xa0>
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	1b52      	subs	r2, r2, r5
 8003e8e:	d41e      	bmi.n	8003ece <_malloc_r+0xc6>
 8003e90:	2a0b      	cmp	r2, #11
 8003e92:	d916      	bls.n	8003ec2 <_malloc_r+0xba>
 8003e94:	1961      	adds	r1, r4, r5
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	6025      	str	r5, [r4, #0]
 8003e9a:	bf18      	it	ne
 8003e9c:	6059      	strne	r1, [r3, #4]
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	bf08      	it	eq
 8003ea2:	6031      	streq	r1, [r6, #0]
 8003ea4:	5162      	str	r2, [r4, r5]
 8003ea6:	604b      	str	r3, [r1, #4]
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f104 060b 	add.w	r6, r4, #11
 8003eae:	f000 f865 	bl	8003f7c <__malloc_unlock>
 8003eb2:	f026 0607 	bic.w	r6, r6, #7
 8003eb6:	1d23      	adds	r3, r4, #4
 8003eb8:	1af2      	subs	r2, r6, r3
 8003eba:	d0b6      	beq.n	8003e2a <_malloc_r+0x22>
 8003ebc:	1b9b      	subs	r3, r3, r6
 8003ebe:	50a3      	str	r3, [r4, r2]
 8003ec0:	e7b3      	b.n	8003e2a <_malloc_r+0x22>
 8003ec2:	6862      	ldr	r2, [r4, #4]
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	bf0c      	ite	eq
 8003ec8:	6032      	streq	r2, [r6, #0]
 8003eca:	605a      	strne	r2, [r3, #4]
 8003ecc:	e7ec      	b.n	8003ea8 <_malloc_r+0xa0>
 8003ece:	4623      	mov	r3, r4
 8003ed0:	6864      	ldr	r4, [r4, #4]
 8003ed2:	e7b2      	b.n	8003e3a <_malloc_r+0x32>
 8003ed4:	4634      	mov	r4, r6
 8003ed6:	6876      	ldr	r6, [r6, #4]
 8003ed8:	e7b9      	b.n	8003e4e <_malloc_r+0x46>
 8003eda:	230c      	movs	r3, #12
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f000 f84c 	bl	8003f7c <__malloc_unlock>
 8003ee4:	e7a1      	b.n	8003e2a <_malloc_r+0x22>
 8003ee6:	6025      	str	r5, [r4, #0]
 8003ee8:	e7de      	b.n	8003ea8 <_malloc_r+0xa0>
 8003eea:	bf00      	nop
 8003eec:	2000019c 	.word	0x2000019c

08003ef0 <_realloc_r>:
 8003ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef4:	4680      	mov	r8, r0
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	460e      	mov	r6, r1
 8003efa:	b921      	cbnz	r1, 8003f06 <_realloc_r+0x16>
 8003efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f00:	4611      	mov	r1, r2
 8003f02:	f7ff bf81 	b.w	8003e08 <_malloc_r>
 8003f06:	b92a      	cbnz	r2, 8003f14 <_realloc_r+0x24>
 8003f08:	f7ff ff12 	bl	8003d30 <_free_r>
 8003f0c:	4625      	mov	r5, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f14:	f000 f838 	bl	8003f88 <_malloc_usable_size_r>
 8003f18:	4284      	cmp	r4, r0
 8003f1a:	4607      	mov	r7, r0
 8003f1c:	d802      	bhi.n	8003f24 <_realloc_r+0x34>
 8003f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f22:	d812      	bhi.n	8003f4a <_realloc_r+0x5a>
 8003f24:	4621      	mov	r1, r4
 8003f26:	4640      	mov	r0, r8
 8003f28:	f7ff ff6e 	bl	8003e08 <_malloc_r>
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d0ed      	beq.n	8003f0e <_realloc_r+0x1e>
 8003f32:	42bc      	cmp	r4, r7
 8003f34:	4622      	mov	r2, r4
 8003f36:	4631      	mov	r1, r6
 8003f38:	bf28      	it	cs
 8003f3a:	463a      	movcs	r2, r7
 8003f3c:	f7ff fed0 	bl	8003ce0 <memcpy>
 8003f40:	4631      	mov	r1, r6
 8003f42:	4640      	mov	r0, r8
 8003f44:	f7ff fef4 	bl	8003d30 <_free_r>
 8003f48:	e7e1      	b.n	8003f0e <_realloc_r+0x1e>
 8003f4a:	4635      	mov	r5, r6
 8003f4c:	e7df      	b.n	8003f0e <_realloc_r+0x1e>
	...

08003f50 <_sbrk_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4d06      	ldr	r5, [pc, #24]	; (8003f6c <_sbrk_r+0x1c>)
 8003f54:	2300      	movs	r3, #0
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	602b      	str	r3, [r5, #0]
 8003f5c:	f7fc fe3a 	bl	8000bd4 <_sbrk>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d102      	bne.n	8003f6a <_sbrk_r+0x1a>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	b103      	cbz	r3, 8003f6a <_sbrk_r+0x1a>
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	bd38      	pop	{r3, r4, r5, pc}
 8003f6c:	200001a4 	.word	0x200001a4

08003f70 <__malloc_lock>:
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <__malloc_lock+0x8>)
 8003f72:	f000 b811 	b.w	8003f98 <__retarget_lock_acquire_recursive>
 8003f76:	bf00      	nop
 8003f78:	200001a8 	.word	0x200001a8

08003f7c <__malloc_unlock>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	; (8003f84 <__malloc_unlock+0x8>)
 8003f7e:	f000 b80c 	b.w	8003f9a <__retarget_lock_release_recursive>
 8003f82:	bf00      	nop
 8003f84:	200001a8 	.word	0x200001a8

08003f88 <_malloc_usable_size_r>:
 8003f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f8c:	1f18      	subs	r0, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfbc      	itt	lt
 8003f92:	580b      	ldrlt	r3, [r1, r0]
 8003f94:	18c0      	addlt	r0, r0, r3
 8003f96:	4770      	bx	lr

08003f98 <__retarget_lock_acquire_recursive>:
 8003f98:	4770      	bx	lr

08003f9a <__retarget_lock_release_recursive>:
 8003f9a:	4770      	bx	lr

08003f9c <_init>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr

08003fa8 <_fini>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr
