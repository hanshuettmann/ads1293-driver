
Tp_SpiAds1293.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004028  08004028  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08004028  08004028  00014028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004030  08004030  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000108  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001a4  200001a4  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000beff  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e0c  00000000  00000000  0002bfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000958  00000000  00000000  0002e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268c5  00000000  00000000  0002f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7fa  00000000  00000000  00055a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4950  00000000  00000000  0006522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149b7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bec  00000000  00000000  00149bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ec0 	.word	0x08003ec0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	08003ec0 	.word	0x08003ec0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ads1293Init>:
/**
 * @brief  Initialize ADS1293 device
 * @param  dummy set this value to 0
 * @retval ADS1293_StatusTypeDef Init process status
 */
ADS1293_StatusTypeDef ads1293Init(uint8_t dummy) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	/* Init SPI peripheral */
	if (spiInit(0) != NUCLEO_SPI_OK) {
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f8fc 	bl	80007ac <spiInit>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d001      	beq.n	80005be <ads1293Init+0x1a>
		return ADS1293_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e003      	b.n	80005c6 <ads1293Init+0x22>
	}

	/* Set device CS to HIGH */
	setNSS(GPIO_PIN_SET);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f96c 	bl	800089c <setNSS>

	return ADS1293_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <ads1293ReadID>:
/**
 * @brief  Read ADS1293 ID register
 * @param  pidData pointer to the uint8_t buffer
 * @retval ADS1293_StatusTypeDef process status
 */
ADS1293_StatusTypeDef ads1293ReadID(uint8_t *pidData) {
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b084      	sub	sp, #16
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]

	uint8_t ptxData = REVID | RREG;
 80005d6:	23c0      	movs	r3, #192	; 0xc0
 80005d8:	73fb      	strb	r3, [r7, #15]

	/* Validate *pidData */
	if (pidData == NULL) {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <ads1293ReadID+0x16>
		return ADS1293_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e00c      	b.n	80005fe <ads1293ReadID+0x30>
	}

	/* Read register and get sensor ID into pidData */
	if (ads1293ReadRegister(&ptxData, pidData, REG_ID_SIZE) != ADS1293_OK) {
 80005e4:	f107 030f 	add.w	r3, r7, #15
 80005e8:	2201      	movs	r2, #1
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f80a 	bl	8000606 <ads1293ReadRegister>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <ads1293ReadID+0x2e>
		return ADS1293_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e000      	b.n	80005fe <ads1293ReadID+0x30>
	}

	return ADS1293_OK;
 80005fc:	2300      	movs	r3, #0

}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <ads1293ReadRegister>:
 * @param  prxData pointer to the uint8_t buffer to store the register value
 * @param  size size amount of data to be sent
 * @retval ADS1293_StatusTypeDef process status
 */
ADS1293_StatusTypeDef ads1293ReadRegister(uint8_t *ptxData, uint8_t *prxData,
		uint16_t size) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b086      	sub	sp, #24
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	4613      	mov	r3, r2
 8000612:	80fb      	strh	r3, [r7, #6]
	/* Validate *ptxData, *prxData and size parameters */
	if (ptxData == NULL || prxData == NULL || size <= 0) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <ads1293ReadRegister+0x20>
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <ads1293ReadRegister+0x20>
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <ads1293ReadRegister+0x24>
		return ADS1293_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e020      	b.n	800066c <ads1293ReadRegister+0x66>
	}

	/* ADS1293 sensor uses 7bit register addresses. MSB in ptxData indicates if the register is being
	 * read or write. Set MSB to 1 will read the register value */
	uint8_t readAddress = *ptxData | RREG;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000632:	b2db      	uxtb	r3, r3
 8000634:	75fb      	strb	r3, [r7, #23]

	/* Set ADS1293 CS to LOW to start communication */
	setNSS(GPIO_PIN_RESET);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f930 	bl	800089c <setNSS>

	/* Send register address with the read command over SPI protocol */
	if (spiSendData(&readAddress, REG_ID_SIZE) != NUCLEO_SPI_OK) {
 800063c:	f107 0317 	add.w	r3, r7, #23
 8000640:	2101      	movs	r1, #1
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8e6 	bl	8000814 <spiSendData>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d001      	beq.n	8000652 <ads1293ReadRegister+0x4c>
		return ADS1293_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00c      	b.n	800066c <ads1293ReadRegister+0x66>
	}

	/* Read register and load value into *prxData */
	if (spiReceiveData(prxData, REG_ID_SIZE) != NUCLEO_SPI_OK) {
 8000652:	2101      	movs	r1, #1
 8000654:	68b8      	ldr	r0, [r7, #8]
 8000656:	f000 f8ff 	bl	8000858 <spiReceiveData>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d001      	beq.n	8000664 <ads1293ReadRegister+0x5e>
		return ADS1293_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	e003      	b.n	800066c <ads1293ReadRegister+0x66>
	}

	/* Set ADS1293 CS to HIGH to finish communication */
	setNSS(GPIO_PIN_SET);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 f919 	bl	800089c <setNSS>

	return ADS1293_OK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ads1293WriteRegister>:
 * @param  prxData pointer to the uint8_t buffer to store the register value
 * @param  size size amount of data to be sent
 * @retval ADS1293_StatusTypeDef process status
 */
ADS1293_StatusTypeDef ads1293WriteRegister(uint8_t wrAddress, uint8_t data,
		uint16_t size) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	80bb      	strh	r3, [r7, #4]
	uint8_t dataToSend = data;
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	73fb      	strb	r3, [r7, #15]

	/* ADS1293 sensor uses 7bit register addresses. MSB in ptxData indicates if the register is being
	 * read or write. Set MSB to 1 will read the register value */
	uint8_t writeAddress = wrAddress & WREG;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000690:	b2db      	uxtb	r3, r3
 8000692:	73bb      	strb	r3, [r7, #14]

	/* Set ADS1293 CS to LOW to start communication */
	setNSS(GPIO_PIN_RESET);
 8000694:	2000      	movs	r0, #0
 8000696:	f000 f901 	bl	800089c <setNSS>

	/* Send register address with the read command over SPI protocol */
	if (spiSendData(&writeAddress, size) != NUCLEO_SPI_OK) {
 800069a:	88ba      	ldrh	r2, [r7, #4]
 800069c:	f107 030e 	add.w	r3, r7, #14
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f8b6 	bl	8000814 <spiSendData>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d001      	beq.n	80006b2 <ads1293WriteRegister+0x3e>
		return ADS1293_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00f      	b.n	80006d2 <ads1293WriteRegister+0x5e>
	}

	/* Send register address with the read command over SPI protocol */
	if (spiSendData(&dataToSend, size) != NUCLEO_SPI_OK) {
 80006b2:	88ba      	ldrh	r2, [r7, #4]
 80006b4:	f107 030f 	add.w	r3, r7, #15
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f8aa 	bl	8000814 <spiSendData>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d001      	beq.n	80006ca <ads1293WriteRegister+0x56>
		return ADS1293_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e003      	b.n	80006d2 <ads1293WriteRegister+0x5e>
	}

	/* Set ADS1293 CS to HIGH to finish communication */
	setNSS(GPIO_PIN_SET);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f8e6 	bl	800089c <setNSS>

	return ADS1293_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <ads1293Set3LeadECG>:
/**
 * @brief  Set ADS1293 to start a 3 lead ecg
 * @param  none
 * @retval none
 */
void ads1293Set3LeadECG(void) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
	/* Connect channel 1’s INP to IN2 and INN to IN1 */
	ads1293WriteRegister(FLEX_CH1_CN, 0x11, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2111      	movs	r1, #17
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ffc6 	bl	8000674 <ads1293WriteRegister>
	/* Connect channel 2’s INP to IN3 and INN to IN1 */
	ads1293WriteRegister(FLEX_CH2_CN, 0x19, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2119      	movs	r1, #25
 80006ec:	2002      	movs	r0, #2
 80006ee:	f7ff ffc1 	bl	8000674 <ads1293WriteRegister>
	/* Enable the common-mode detector on input pins IN1, IN2 and IN3 */
	ads1293WriteRegister(CMDET_EN, 0x07, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2107      	movs	r1, #7
 80006f6:	200a      	movs	r0, #10
 80006f8:	f7ff ffbc 	bl	8000674 <ads1293WriteRegister>
	/* Connect the output of the RLD amplifier internally to pin IN4 */
	ads1293WriteRegister(RLD_CN, 0x04, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2104      	movs	r1, #4
 8000700:	200c      	movs	r0, #12
 8000702:	f7ff ffb7 	bl	8000674 <ads1293WriteRegister>
	/* Use external crystal and feed the internal oscillator's output to the digital */
	ads1293WriteRegister(OSC_CN, 0x04, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2104      	movs	r1, #4
 800070a:	2012      	movs	r0, #18
 800070c:	f7ff ffb2 	bl	8000674 <ads1293WriteRegister>
	/* Shuts down unused channel 3’s signal path */
	ads1293WriteRegister(AFE_SHDN_CN, 0x24, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2124      	movs	r1, #36	; 0x24
 8000714:	2014      	movs	r0, #20
 8000716:	f7ff ffad 	bl	8000674 <ads1293WriteRegister>
	/* Configures the R2 decimation rate as 5 for all channels */
	ads1293WriteRegister(R2_RATE, 0x02, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	2102      	movs	r1, #2
 800071e:	2021      	movs	r0, #33	; 0x21
 8000720:	f7ff ffa8 	bl	8000674 <ads1293WriteRegister>
	/* Configures the R3 decimation rate as 6 for channel 1 */
	ads1293WriteRegister(R3_RATE_CH1, 0x02, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	2022      	movs	r0, #34	; 0x22
 800072a:	f7ff ffa3 	bl	8000674 <ads1293WriteRegister>
	/* Configures the R3 decimation rate as 6 for channel 2 */
	ads1293WriteRegister(R3_RATE_CH2, 0x02, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	2102      	movs	r1, #2
 8000732:	2023      	movs	r0, #35	; 0x23
 8000734:	f7ff ff9e 	bl	8000674 <ads1293WriteRegister>
	/* Configures the DRDYB source to channel 1 ECG (or fastest channel) */
	ads1293WriteRegister(DRDYB_SRC, 0x08, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	2108      	movs	r1, #8
 800073c:	2027      	movs	r0, #39	; 0x27
 800073e:	f7ff ff99 	bl	8000674 <ads1293WriteRegister>
	/* Enables channel 1 ECG and channel 2 ECG for loop read-back mode */
	ads1293WriteRegister(CH_CNFG, 0x30, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	2130      	movs	r1, #48	; 0x30
 8000746:	202f      	movs	r0, #47	; 0x2f
 8000748:	f7ff ff94 	bl	8000674 <ads1293WriteRegister>
	/* Starts data conversion */
	ads1293WriteRegister(CONFIG, 0x01, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2101      	movs	r1, #1
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff8f 	bl	8000674 <ads1293WriteRegister>

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}

0800075a <ads1293ReadDataLoop>:
/**
 * @brief  Read loop read-back register
 * @param  sourceBytes source bytes number
 * @retval none
 */
void ads1293ReadDataLoop(uint8_t *rawData, uint32_t sourceBytes) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
	/* Read DATA_LOOP register */
	uint8_t readAddress = DATA_LOOP | RREG;
 8000764:	23d0      	movs	r3, #208	; 0xd0
 8000766:	72fb      	strb	r3, [r7, #11]

	/* Set ADS1293 CS to LOW to start communication */
	setNSS(GPIO_PIN_RESET);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 f897 	bl	800089c <setNSS>

	/* Send register address with the read command over SPI protocol */
	spiSendData(&readAddress, sizeof(uint8_t));
 800076e:	f107 030b 	add.w	r3, r7, #11
 8000772:	2101      	movs	r1, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f84d 	bl	8000814 <spiSendData>

	for (uint32_t i = 0; i < (1 + sourceBytes); ++i) {
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e009      	b.n	8000794 <ads1293ReadDataLoop+0x3a>
		spiReceiveData(&rawData[i], sizeof(uint8_t));
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f865 	bl	8000858 <spiReceiveData>
	for (uint32_t i = 0; i < (1 + sourceBytes); ++i) {
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3f0      	bcc.n	8000780 <ads1293ReadDataLoop+0x26>
	}

	/* Set ADS1293 CS to HIGH to finish communication */
	setNSS(GPIO_PIN_RESET);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f87c 	bl	800089c <setNSS>

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <spiInit>:
/**
 * @brief  Initialize SPI peripheral
 * @param  dummy set this value to 0
 * @retval NUCLEO_SPIStatusTypeDef Init process status
 */
NUCLEO_SPIStatusTypeDef spiInit(uint8_t dummy) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	/*##-1- Configure the SPI peripheral ######################################*/
	hspi.Instance = SPI1;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <spiInit+0x60>)
 80007b8:	4a15      	ldr	r2, [pc, #84]	; (8000810 <spiInit+0x64>)
 80007ba:	601a      	str	r2, [r3, #0]

	hspi.Init.Mode = SPI_MODE_MASTER;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <spiInit+0x60>)
 80007be:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c2:	605a      	str	r2, [r3, #4]
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <spiInit+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
	hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <spiInit+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
	hspi.Init.CLKPolarity = SPI_POLARITY_LOW; //CPOL = 0
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <spiInit+0x60>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
	hspi.Init.CLKPhase = SPI_PHASE_2EDGE; //CPHA = 1
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <spiInit+0x60>)
 80007d8:	2201      	movs	r2, #1
 80007da:	615a      	str	r2, [r3, #20]
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <spiInit+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
	hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <spiInit+0x60>)
 80007e4:	2228      	movs	r2, #40	; 0x28
 80007e6:	61da      	str	r2, [r3, #28]
	hspi.Init.NSS = SPI_NSS_SOFT;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <spiInit+0x60>)
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	619a      	str	r2, [r3, #24]

	/* Init peripheral */
	if (HAL_SPI_Init(&hspi) != HAL_OK) {
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <spiInit+0x60>)
 80007f2:	f001 fb43 	bl	8001e7c <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <spiInit+0x54>
		/* Initialization Error */
		return NUCLEO_SPI_ERROR;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e000      	b.n	8000802 <spiInit+0x56>
	}
	return NUCLEO_SPI_OK;
 8000800:	2301      	movs	r3, #1
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000b8 	.word	0x200000b8
 8000810:	40013000 	.word	0x40013000

08000814 <spiSendData>:
 * @brief  Send data through the SPI MOSI line
 * @param  ptxData pointer to the uint8_t buffer to be sent
 * @param  size amount of data to be sent
 * @retval none
 */
NUCLEO_SPIStatusTypeDef spiSendData(uint8_t *ptxData, uint16_t size) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	807b      	strh	r3, [r7, #2]
	/* Validate ptxData and size parameters */
	if (ptxData == NULL || size <= 0) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <spiSendData+0x18>
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <spiSendData+0x1c>
		return NUCLEO_SPI_ERROR;
 800082c:	2300      	movs	r3, #0
 800082e:	e00c      	b.n	800084a <spiSendData+0x36>
	}

	if (HAL_SPI_Transmit(&hspi, ptxData, size, HAL_MAX_DELAY) != HAL_OK) {
 8000830:	887a      	ldrh	r2, [r7, #2]
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <spiSendData+0x40>)
 800083a:	f001 fbb0 	bl	8001f9e <HAL_SPI_Transmit>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <spiSendData+0x34>
		return NUCLEO_SPI_ERROR;
 8000844:	2300      	movs	r3, #0
 8000846:	e000      	b.n	800084a <spiSendData+0x36>
	}

	return NUCLEO_SPI_OK;
 8000848:	2301      	movs	r3, #1
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000b8 	.word	0x200000b8

08000858 <spiReceiveData>:
 * @brief  Receive data from the SPI MISO line
 * @param  prxData pointer to the uint8_t buffer
 * @param  size amount of data to be sent
 * @retval none
 */
NUCLEO_SPIStatusTypeDef spiReceiveData(uint8_t *prxData, uint16_t size) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
	/* Validate ptxData and size parameters */
	if (prxData == NULL || size <= 0) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <spiReceiveData+0x18>
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <spiReceiveData+0x1c>
		return NUCLEO_SPI_ERROR;
 8000870:	2300      	movs	r3, #0
 8000872:	e00c      	b.n	800088e <spiReceiveData+0x36>
	}

	if (HAL_SPI_Receive(&hspi, prxData, size, HAL_MAX_DELAY) != HAL_OK) {
 8000874:	887a      	ldrh	r2, [r7, #2]
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <spiReceiveData+0x40>)
 800087e:	f001 fcec 	bl	800225a <HAL_SPI_Receive>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <spiReceiveData+0x34>
		return NUCLEO_SPI_ERROR;
 8000888:	2300      	movs	r3, #0
 800088a:	e000      	b.n	800088e <spiReceiveData+0x36>
	}

	return NUCLEO_SPI_OK;
 800088c:	2301      	movs	r3, #1
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000b8 	.word	0x200000b8

0800089c <setNSS>:
/**
 * @brief  Handle NSS line by software
 * @param  state set line to high or low
 * @retval none
 */
void setNSS(GPIO_PinState state) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	/* GPIO PA4 used as NSS line */
	HAL_GPIO_WritePin(SPIx_NSS_SOFT_GPIO_PORT, SPIx_NSS_SOFT_PIN, state);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	461a      	mov	r2, r3
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <setNSS+0x20>)
 80008b0:	f000 fcc2 	bl	8001238 <HAL_GPIO_WritePin>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40020c00 	.word	0x40020c00

080008c0 <uartInit>:
/**
 * @brief  Initialize UART peripheral
 * @param  none
 * @retval bool Init process status
 */
bool_t uartInit(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

	/*##-1- Configure the UART peripheral ######################################*/
	/* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	UartHandle.Instance = USARTx;
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <uartInit+0xa0>)
 80008c6:	4a27      	ldr	r2, [pc, #156]	; (8000964 <uartInit+0xa4>)
 80008c8:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate = 9600;
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <uartInit+0xa0>)
 80008cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d0:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <uartInit+0xa0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <uartInit+0xa0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_ODD;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <uartInit+0xa0>)
 80008e0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80008e4:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <uartInit+0xa0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <uartInit+0xa0>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <uartInit+0xa0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]

	/* Init peripheral */
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 80008f8:	4819      	ldr	r0, [pc, #100]	; (8000960 <uartInit+0xa0>)
 80008fa:	f002 f97b 	bl	8002bf4 <HAL_UART_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <uartInit+0x48>
		/* Initialization Error */
		return false;
 8000904:	2300      	movs	r3, #0
 8000906:	e028      	b.n	800095a <uartInit+0x9a>
	} else {
		uartSendString((uint8_t*) UART_WELCOME_MSG);
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <uartInit+0xa8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f83b 	bl	8000988 <uartSendString>
		uartSendString((uint8_t*) UART_BAUDRATE_MSG);
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <uartInit+0xac>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f836 	bl	8000988 <uartSendString>
		uartSendString((uint8_t*) UART_WORDLENGTH_MSG);
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <uartInit+0xb0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f831 	bl	8000988 <uartSendString>
		uartSendString((uint8_t*) UART_STOPBITS_MSG);
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <uartInit+0xb4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f82c 	bl	8000988 <uartSendString>
		uartSendString((uint8_t*) UART_PARITY_MSG);
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <uartInit+0xb8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f827 	bl	8000988 <uartSendString>
		uartSendString((uint8_t*) UART_FLOWCONTROL_MSG);
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <uartInit+0xbc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f822 	bl	8000988 <uartSendString>
		uartSendString((uint8_t*) UART_MODE_MSG);
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <uartInit+0xc0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f81d 	bl	8000988 <uartSendString>
		uartSendString((uint8_t*) UART_OVERSAMPLING_MSG);
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <uartInit+0xc4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f818 	bl	8000988 <uartSendString>
		return true;
 8000958:	2301      	movs	r3, #1
	}

}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000110 	.word	0x20000110
 8000964:	40004800 	.word	0x40004800
 8000968:	20000000 	.word	0x20000000
 800096c:	20000004 	.word	0x20000004
 8000970:	20000008 	.word	0x20000008
 8000974:	2000000c 	.word	0x2000000c
 8000978:	20000010 	.word	0x20000010
 800097c:	20000014 	.word	0x20000014
 8000980:	20000018 	.word	0x20000018
 8000984:	2000001c 	.word	0x2000001c

08000988 <uartSendString>:
/**
 * @brief  Send string to the console
 * @param  pstring pointer to the array to be sent to the console
 * @retval none
 */
void uartSendString(uint8_t *pstring) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	/* Validates pstring parameter */
	if (pstring == NULL) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00b      	beq.n	80009ae <uartSendString+0x26>
		return;
	}

	/* Send pstring to the console */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring,
			strlen((const char*) pstring), HAL_MAX_DELAY);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fc2a 	bl	80001f0 <strlen>
 800099c:	4603      	mov	r3, r0
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring,
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <uartSendString+0x30>)
 80009a8:	f002 f971 	bl	8002c8e <HAL_UART_Transmit>
 80009ac:	e000      	b.n	80009b0 <uartSendString+0x28>
		return;
 80009ae:	bf00      	nop
}
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000110 	.word	0x20000110

080009bc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10e      	bne.n	80009ea <BSP_LED_Init+0x2e>
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <BSP_LED_Init+0x94>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <BSP_LED_Init+0x94>)
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <BSP_LED_Init+0x94>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	e00d      	b.n	8000a06 <BSP_LED_Init+0x4a>
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <BSP_LED_Init+0x94>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <BSP_LED_Init+0x94>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <BSP_LED_Init+0x94>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <BSP_LED_Init+0x98>)
 8000a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <BSP_LED_Init+0x9c>)
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	f107 0214 	add.w	r2, r7, #20
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fa40 	bl	8000eb0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <BSP_LED_Init+0x9c>)
 8000a34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <BSP_LED_Init+0x98>)
 8000a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	f000 fbf8 	bl	8001238 <HAL_GPIO_WritePin>
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	08003fd4 	.word	0x08003fd4
 8000a58:	20000020 	.word	0x20000020

08000a5c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <BSP_LED_Toggle+0x2c>)
 8000a6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	4906      	ldr	r1, [pc, #24]	; (8000a8c <BSP_LED_Toggle+0x30>)
 8000a72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f000 fbf6 	bl	800126a <HAL_GPIO_TogglePin>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000020 	.word	0x20000020
 8000a8c:	08003fd4 	.word	0x08003fd4

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <SystemInit+0x60>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <SystemInit+0x60>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <SystemInit+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <SystemInit+0x64>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <SystemInit+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <SystemInit+0x64>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <SystemInit+0x64>)
 8000abc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <SystemInit+0x64>)
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <SystemInit+0x68>)
 8000aca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <SystemInit+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <SystemInit+0x64>)
 8000ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SystemInit+0x60>)
 8000ae0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae4:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00
 8000af4:	40023800 	.word	0x40023800
 8000af8:	24003010 	.word	0x24003010

08000afc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b50:	f000 f884 	bl	8000c5c <HAL_IncTick>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f002 fd02 	bl	8003590 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20030000 	.word	0x20030000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	20000154 	.word	0x20000154
 8000bc0:	200001a8 	.word	0x200001a8

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x34>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_Init+0x34>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x34>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x34>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f931 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f000 fc56 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f93b 	bl	8000e96 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f911 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000002c 	.word	0x2000002c
 8000c54:	20000034 	.word	0x20000034
 8000c58:	20000030 	.word	0x20000030

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000034 	.word	0x20000034
 8000c80:	20000158 	.word	0x20000158

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000158 	.word	0x20000158

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000034 	.word	0x20000034

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff47 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff5c 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff8e 	bl	8000d9c <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffb0 	bl	8000e04 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	e177      	b.n	80011bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f040 8166 	bne.w	80011b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d005      	beq.n	8000f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d130      	bne.n	8000f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	091b      	lsrs	r3, r3, #4
 8000f4e:	f003 0201 	and.w	r2, r3, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d017      	beq.n	8000fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d123      	bne.n	8000ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	69b9      	ldr	r1, [r7, #24]
 8000ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0203 	and.w	r2, r3, #3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80c0 	beq.w	80011b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <HAL_GPIO_Init+0x324>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <HAL_GPIO_Init+0x324>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <HAL_GPIO_Init+0x324>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001052:	4a61      	ldr	r2, [pc, #388]	; (80011d8 <HAL_GPIO_Init+0x328>)
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a58      	ldr	r2, [pc, #352]	; (80011dc <HAL_GPIO_Init+0x32c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d037      	beq.n	80010ee <HAL_GPIO_Init+0x23e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a57      	ldr	r2, [pc, #348]	; (80011e0 <HAL_GPIO_Init+0x330>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d031      	beq.n	80010ea <HAL_GPIO_Init+0x23a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a56      	ldr	r2, [pc, #344]	; (80011e4 <HAL_GPIO_Init+0x334>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d02b      	beq.n	80010e6 <HAL_GPIO_Init+0x236>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a55      	ldr	r2, [pc, #340]	; (80011e8 <HAL_GPIO_Init+0x338>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x232>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a54      	ldr	r2, [pc, #336]	; (80011ec <HAL_GPIO_Init+0x33c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x22e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <HAL_GPIO_Init+0x340>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x22a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x344>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x348>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_GPIO_Init+0x34c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x350>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x21a>
 80010c6:	2309      	movs	r3, #9
 80010c8:	e012      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ca:	230a      	movs	r3, #10
 80010cc:	e010      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ce:	2308      	movs	r3, #8
 80010d0:	e00e      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	; (80011d8 <HAL_GPIO_Init+0x328>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001132:	4a34      	ldr	r2, [pc, #208]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_GPIO_Init+0x354>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <HAL_GPIO_Init+0x354>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_GPIO_Init+0x354>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_GPIO_Init+0x354>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae84 	bls.w	8000ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	40022000 	.word	0x40022000
 8001200:	40022400 	.word	0x40022400
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e001      	b.n	800122a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127c:	887a      	ldrh	r2, [r7, #2]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	041a      	lsls	r2, r3, #16
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43d9      	mvns	r1, r3
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	400b      	ands	r3, r1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_UART_MspInit>:
 *           - Peripheral's clock enable
 *           - Peripheral's GPIO Configuration
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
	USARTx_RX_GPIO_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

	/* Enable USARTx clock */
	USARTx_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_UART_MspInit+0x9c>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_TX_PIN;
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800130e:	2307      	movs	r3, #7
 8001310:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <HAL_UART_MspInit+0xa0>)
 800131a:	f7ff fdc9 	bl	8000eb0 <HAL_GPIO_Init>

	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800131e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001322:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001324:	2307      	movs	r3, #7
 8001326:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <HAL_UART_MspInit+0xa0>)
 8001330:	f7ff fdbe 	bl	8000eb0 <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020c00 	.word	0x40020c00

08001344 <HAL_SPI_MspInit>:
 *           - Peripheral's clock enable
 *           - Peripheral's GPIO Configuration
 * @param spi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable SPIx clock */
	SPIx_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	4a4e      	ldr	r2, [pc, #312]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 8001356:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800135a:	6453      	str	r3, [r2, #68]	; 0x44
 800135c:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	6a3b      	ldr	r3, [r7, #32]

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO SPI clocks */
	SPIx_SCK_GPIO_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	4b48      	ldr	r3, [pc, #288]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4a47      	ldr	r2, [pc, #284]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6313      	str	r3, [r2, #48]	; 0x30
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	69fb      	ldr	r3, [r7, #28]
	SPIx_MISO_GPIO_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a40      	ldr	r2, [pc, #256]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
	SPIx_MOSI_GPIO_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a39      	ldr	r2, [pc, #228]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
	SPIx_NSS_GPIO_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
	SPIx_NSS_SOFT_GPIO_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4a2b      	ldr	r2, [pc, #172]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <HAL_SPI_MspInit+0x14c>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/*Configure GPIO pin : ADS1293_DRDB_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4822      	ldr	r0, [pc, #136]	; (8001494 <HAL_SPI_MspInit+0x150>)
 800140a:	f7ff fd51 	bl	8000eb0 <HAL_GPIO_Init>

	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 800140e:	2320      	movs	r3, #32
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001416:	2305      	movs	r3, #5
 8001418:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	481d      	ldr	r0, [pc, #116]	; (8001498 <HAL_SPI_MspInit+0x154>)
 8001422:	f7ff fd45 	bl	8000eb0 <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8001426:	2340      	movs	r3, #64	; 0x40
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 800142e:	2305      	movs	r3, #5
 8001430:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4817      	ldr	r0, [pc, #92]	; (8001498 <HAL_SPI_MspInit+0x154>)
 800143a:	f7ff fd39 	bl	8000eb0 <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8001446:	2305      	movs	r3, #5
 8001448:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <HAL_SPI_MspInit+0x154>)
 8001452:	f7ff fd2d 	bl	8000eb0 <HAL_GPIO_Init>

	/* SPI NSS GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 8001456:	2310      	movs	r3, #16
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_NSS_AF;
 800145e:	2305      	movs	r3, #5
 8001460:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_SPI_MspInit+0x154>)
 800146a:	f7ff fd21 	bl	8000eb0 <HAL_GPIO_Init>

	/* SPI NSS Software GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_NSS_SOFT_PIN;
 800146e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30

	HAL_GPIO_Init(SPIx_NSS_SOFT_GPIO_PORT, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <HAL_SPI_MspInit+0x150>)
 8001484:	f7ff fd14 	bl	8000eb0 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3738      	adds	r7, #56	; 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_PWREx_EnableOverDrive+0x90>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_PWREx_EnableOverDrive+0x90>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_PWREx_EnableOverDrive+0x90>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_PWREx_EnableOverDrive+0x94>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d8:	f7ff fbd4 	bl	8000c84 <HAL_GetTick>
 80014dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014de:	e009      	b.n	80014f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e0:	f7ff fbd0 	bl	8000c84 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ee:	d901      	bls.n	80014f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e01f      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_PWREx_EnableOverDrive+0x98>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d1ee      	bne.n	80014e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001508:	f7ff fbbc 	bl	8000c84 <HAL_GetTick>
 800150c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800150e:	e009      	b.n	8001524 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001510:	f7ff fbb8 	bl	8000c84 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151e:	d901      	bls.n	8001524 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e007      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_PWREx_EnableOverDrive+0x98>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001530:	d1ee      	bne.n	8001510 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	420e0040 	.word	0x420e0040
 8001544:	40007000 	.word	0x40007000
 8001548:	420e0044 	.word	0x420e0044

0800154c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e267      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d075      	beq.n	8001656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d00c      	beq.n	8001590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4b85      	ldr	r3, [pc, #532]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4b82      	ldr	r3, [pc, #520]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158e:	d10b      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d05b      	beq.n	8001654 <HAL_RCC_OscConfig+0x108>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d157      	bne.n	8001654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e242      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x74>
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x98>
 80015ca:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6f      	ldr	r2, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6c      	ldr	r2, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015e4:	4b69      	ldr	r3, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a68      	ldr	r2, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b66      	ldr	r3, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb3e 	bl	8000c84 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fb3a 	bl	8000c84 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e207      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xc0>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb2a 	bl	8000c84 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fb26 	bl	8000c84 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1f3      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0xe8>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1c7      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff fadf 	bl	8000c84 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fadb 	bl	8000c84 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1a8      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4925      	ldr	r1, [pc, #148]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fabe 	bl	8000c84 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff faba 	bl	8000c84 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e187      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d036      	beq.n	80017a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d016      	beq.n	800176c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fa9e 	bl	8000c84 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fa9a 	bl	8000c84 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e167      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x200>
 800176a:	e01b      	b.n	80017a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fa87 	bl	8000c84 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	e00e      	b.n	8001798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fa83 	bl	8000c84 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d907      	bls.n	8001798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e150      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 800178c:	40023800 	.word	0x40023800
 8001790:	42470000 	.word	0x42470000
 8001794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800179a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ea      	bne.n	800177a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8097 	beq.w	80018e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a7c      	ldr	r2, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b7a      	ldr	r3, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b77      	ldr	r3, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b74      	ldr	r3, [pc, #464]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a73      	ldr	r2, [pc, #460]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fa43 	bl	8000c84 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fa3f 	bl	8000c84 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e10c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x2ea>
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	e01c      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x30c>
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a5e      	ldr	r2, [pc, #376]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a5b      	ldr	r2, [pc, #364]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001858:	4b58      	ldr	r3, [pc, #352]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a57      	ldr	r2, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	4a54      	ldr	r2, [pc, #336]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d015      	beq.n	80018a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa04 	bl	8000c84 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fa00 	bl	8000c84 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0cb      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0ee      	beq.n	8001880 <HAL_RCC_OscConfig+0x334>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7ff f9ee 	bl	8000c84 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff f9ea 	bl	8000c84 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0b5      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ee      	bne.n	80018ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a1 	beq.w	8001a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d05c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d141      	bne.n	8001982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff f9be 	bl	8000c84 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f9ba 	bl	8000c84 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e087      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	3b01      	subs	r3, #1
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	491b      	ldr	r1, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff f993 	bl	8000c84 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff f98f 	bl	8000c84 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e05c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x416>
 8001980:	e054      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f97c 	bl	8000c84 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f978 	bl	8000c84 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e045      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x444>
 80019ae:	e03d      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e038      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000
 80019c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x4ec>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d028      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d121      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d11a      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	3b01      	subs	r3, #1
 8001a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cc      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d90c      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d044      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d119      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e067      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f8aa 	bl	8000c84 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff f8a6 	bl	8000c84 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d20c      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f821 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490a      	ldr	r1, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f80a 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08003fdc 	.word	0x08003fdc
 8001c00:	2000002c 	.word	0x2000002c
 8001c04:	20000030 	.word	0x20000030

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b094      	sub	sp, #80	; 0x50
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c18:	2300      	movs	r3, #0
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d00d      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	f200 80e1 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3a:	e0db      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c40:	e0db      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c46:	e0d8      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	2200      	movs	r2, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
 8001c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8c:	0150      	lsls	r0, r2, #5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4621      	mov	r1, r4
 8001c94:	1a51      	subs	r1, r2, r1
 8001c96:	6139      	str	r1, [r7, #16]
 8001c98:	4629      	mov	r1, r5
 8001c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cac:	4659      	mov	r1, fp
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	4651      	mov	r1, sl
 8001cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb6:	4651      	mov	r1, sl
 8001cb8:	018a      	lsls	r2, r1, #6
 8001cba:	4651      	mov	r1, sl
 8001cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cda:	4690      	mov	r8, r2
 8001cdc:	4699      	mov	r9, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	eb18 0303 	adds.w	r3, r8, r3
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	eb49 0303 	adc.w	r3, r9, r3
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	024b      	lsls	r3, r1, #9
 8001cfe:	4621      	mov	r1, r4
 8001d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d04:	4621      	mov	r1, r4
 8001d06:	024a      	lsls	r2, r1, #9
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	2200      	movs	r2, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d18:	f7fe fac2 	bl	80002a0 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d24:	e058      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4611      	mov	r1, r2
 8001d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d40:	4642      	mov	r2, r8
 8001d42:	464b      	mov	r3, r9
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	0159      	lsls	r1, r3, #5
 8001d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d52:	0150      	lsls	r0, r2, #5
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4641      	mov	r1, r8
 8001d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d5e:	4649      	mov	r1, r9
 8001d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d78:	ebb2 040a 	subs.w	r4, r2, sl
 8001d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	00eb      	lsls	r3, r5, #3
 8001d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8e:	00e2      	lsls	r2, r4, #3
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	4643      	mov	r3, r8
 8001d96:	18e3      	adds	r3, r4, r3
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	eb45 0303 	adc.w	r3, r5, r3
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dae:	4629      	mov	r1, r5
 8001db0:	028b      	lsls	r3, r1, #10
 8001db2:	4621      	mov	r1, r4
 8001db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db8:	4621      	mov	r1, r4
 8001dba:	028a      	lsls	r2, r1, #10
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	61fa      	str	r2, [r7, #28]
 8001dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dcc:	f7fe fa68 	bl	80002a0 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	2000002c 	.word	0x2000002c

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08003fec 	.word	0x08003fec

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08003fec 	.word	0x08003fec

08001e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e083      	b.n	8001f96 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e9e:	d009      	beq.n	8001eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
 8001ea6:	e005      	b.n	8001eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d106      	bne.n	8001ece <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fa3b 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	ea42 0103 	orr.w	r1, r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	0c1b      	lsrs	r3, r3, #16
 8001f4c:	f003 0104 	and.w	r1, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f003 0210 	and.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f68:	d105      	bne.n	8001f76 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b292      	uxth	r2, r2
 8001f74:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b088      	sub	sp, #32
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_SPI_Transmit+0x22>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e148      	b.n	8002252 <HAL_SPI_Transmit+0x2b4>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fc8:	f7fe fe5c 	bl	8000c84 <HAL_GetTick>
 8001fcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d002      	beq.n	8001fe4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fe2:	e12d      	b.n	8002240 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_SPI_Transmit+0x52>
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ff4:	e124      	b.n	8002240 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203c:	d10f      	bne.n	800205e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800204c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800205c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002066:	d10f      	bne.n	8002088 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002086:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d007      	beq.n	80020a6 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ae:	d14b      	bne.n	8002148 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_SPI_Transmit+0x120>
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d13e      	bne.n	800213c <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	881a      	ldrh	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	1c9a      	adds	r2, r3, #2
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020e2:	e02b      	b.n	800213c <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d112      	bne.n	8002118 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	1c9a      	adds	r2, r3, #2
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	86da      	strh	r2, [r3, #54]	; 0x36
 8002116:	e011      	b.n	800213c <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002118:	f7fe fdb4 	bl	8000c84 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d803      	bhi.n	8002130 <HAL_SPI_Transmit+0x192>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d102      	bne.n	8002136 <HAL_SPI_Transmit+0x198>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	77fb      	strb	r3, [r7, #31]
          goto error;
 800213a:	e081      	b.n	8002240 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ce      	bne.n	80020e4 <HAL_SPI_Transmit+0x146>
 8002146:	e04c      	b.n	80021e2 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_SPI_Transmit+0x1b8>
 8002150:	8afb      	ldrh	r3, [r7, #22]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d140      	bne.n	80021d8 <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	330c      	adds	r3, #12
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800217c:	e02c      	b.n	80021d8 <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b02      	cmp	r3, #2
 800218a:	d113      	bne.n	80021b4 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	330c      	adds	r3, #12
 8002196:	7812      	ldrb	r2, [r2, #0]
 8002198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80021b2:	e011      	b.n	80021d8 <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021b4:	f7fe fd66 	bl	8000c84 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d803      	bhi.n	80021cc <HAL_SPI_Transmit+0x22e>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d102      	bne.n	80021d2 <HAL_SPI_Transmit+0x234>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021d6:	e033      	b.n	8002240 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1cd      	bne.n	800217e <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ea:	d107      	bne.n	80021fc <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021fa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fcb5 	bl	8002b70 <SPI_EndRxTxTransaction>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	e000      	b.n	8002240 <HAL_SPI_Transmit+0x2a2>
  }

error:
 800223e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002250:	7ffb      	ldrb	r3, [r7, #31]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b08a      	sub	sp, #40	; 0x28
 800225e:	af02      	add	r7, sp, #8
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800227a:	d112      	bne.n	80022a2 <HAL_SPI_Receive+0x48>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10e      	bne.n	80022a2 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2204      	movs	r2, #4
 8002288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	4613      	mov	r3, r2
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f969 	bl	8002570 <HAL_SPI_TransmitReceive>
 800229e:	4603      	mov	r3, r0
 80022a0:	e162      	b.n	8002568 <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_SPI_Receive+0x56>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e15b      	b.n	8002568 <HAL_SPI_Receive+0x30e>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b8:	f7fe fce4 	bl	8000c84 <HAL_GetTick>
 80022bc:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d002      	beq.n	80022d0 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022ce:	e142      	b.n	8002556 <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_SPI_Receive+0x82>
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022e0:	e139      	b.n	8002556 <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2204      	movs	r2, #4
 80022e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002328:	d116      	bne.n	8002358 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002348:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002360:	d10f      	bne.n	8002382 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d007      	beq.n	80023a0 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d162      	bne.n	800246e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023a8:	e02e      	b.n	8002408 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d115      	bne.n	80023e4 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f103 020c 	add.w	r2, r3, #12
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023e2:	e011      	b.n	8002408 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e4:	f7fe fc4e 	bl	8000c84 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d803      	bhi.n	80023fc <HAL_SPI_Receive+0x1a2>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d102      	bne.n	8002402 <HAL_SPI_Receive+0x1a8>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002406:	e0a6      	b.n	8002556 <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1cb      	bne.n	80023aa <HAL_SPI_Receive+0x150>
 8002412:	e031      	b.n	8002478 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d113      	bne.n	800244a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	b292      	uxth	r2, r2
 800242e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002448:	e011      	b.n	800246e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800244a:	f7fe fc1b 	bl	8000c84 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d803      	bhi.n	8002462 <HAL_SPI_Receive+0x208>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d102      	bne.n	8002468 <HAL_SPI_Receive+0x20e>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800246c:	e073      	b.n	8002556 <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1cd      	bne.n	8002414 <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002480:	d144      	bne.n	800250c <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002490:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	2101      	movs	r1, #1
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fa79 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	77fb      	strb	r3, [r7, #31]
      goto error;
 80024ac:	e053      	b.n	8002556 <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b6:	d107      	bne.n	80024c8 <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	b292      	uxth	r2, r2
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	e008      	b.n	80024da <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f103 020c 	add.w	r2, r3, #12
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	2101      	movs	r1, #1
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fa55 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0202 	orr.w	r2, r3, #2
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002500:	e029      	b.n	8002556 <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 800250a:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	6839      	ldr	r1, [r7, #0]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fac7 	bl	8002aa4 <SPI_EndRxTransaction>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b10      	cmp	r3, #16
 800252e:	d10a      	bne.n	8002546 <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f043 0202 	orr.w	r2, r3, #2
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002544:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	77fb      	strb	r3, [r7, #31]
 8002552:	e000      	b.n	8002556 <HAL_SPI_Receive+0x2fc>
  }

error :
 8002554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002566:	7ffb      	ldrb	r3, [r7, #31]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002582:	2301      	movs	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_SPI_TransmitReceive+0x2a>
 8002596:	2302      	movs	r3, #2
 8002598:	e1f8      	b.n	800298c <HAL_SPI_TransmitReceive+0x41c>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025a2:	f7fe fb6f 	bl	8000c84 <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d00f      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x74>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ca:	d107      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <HAL_SPI_TransmitReceive+0x6c>
 80025d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d003      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
 80025de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025e2:	e1c9      	b.n	8002978 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x86>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x86>
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025fc:	e1bc      	b.n	8002978 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b04      	cmp	r3, #4
 8002608:	d003      	beq.n	8002612 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	887a      	ldrh	r2, [r7, #2]
 8002622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	887a      	ldrh	r2, [r7, #2]
 800263a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002650:	d10f      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002670:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d007      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002698:	f040 808b 	bne.w	80027b2 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x13a>
 80026a4:	8b7b      	ldrh	r3, [r7, #26]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d178      	bne.n	800279c <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	881a      	ldrh	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	1c9a      	adds	r2, r3, #2
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ce:	e065      	b.n	800279c <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d12d      	bne.n	800273a <HAL_SPI_TransmitReceive+0x1ca>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d028      	beq.n	800273a <HAL_SPI_TransmitReceive+0x1ca>
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d125      	bne.n	800273a <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	881a      	ldrh	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	1c9a      	adds	r2, r3, #2
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <HAL_SPI_TransmitReceive+0x1ca>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002728:	d107      	bne.n	800273a <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002738:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d119      	bne.n	800277c <HAL_SPI_TransmitReceive+0x20c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d014      	beq.n	800277c <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	b292      	uxth	r2, r2
 800275e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002778:	2301      	movs	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800277c:	f7fe fa82 	bl	8000c84 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002788:	429a      	cmp	r2, r3
 800278a:	d807      	bhi.n	800279c <HAL_SPI_TransmitReceive+0x22c>
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d003      	beq.n	800279c <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800279a:	e0ed      	b.n	8002978 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d194      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x160>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d18f      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x160>
 80027b0:	e08e      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x250>
 80027ba:	8b7b      	ldrh	r3, [r7, #26]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d17d      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e6:	e069      	b.n	80028bc <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d12e      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2e4>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d029      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x2e4>
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d126      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10c      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2e4>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002842:	d107      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002852:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d119      	bne.n	8002896 <HAL_SPI_TransmitReceive+0x326>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d014      	beq.n	8002896 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002892:	2301      	movs	r3, #1
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002896:	f7fe f9f5 	bl	8000c84 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d803      	bhi.n	80028ae <HAL_SPI_TransmitReceive+0x33e>
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d102      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x344>
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d103      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028ba:	e05d      	b.n	8002978 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d190      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x278>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d18b      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d8:	d119      	bne.n	800290e <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	2201      	movs	r2, #1
 80028e2:	2101      	movs	r1, #1
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f855 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0202 	orr.w	r2, r3, #2
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8002902:	e039      	b.n	8002978 <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 800290c:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d10d      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f043 0202 	orr.w	r2, r3, #2
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002930:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f917 	bl	8002b70 <SPI_EndRxTxTransaction>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002954:	e010      	b.n	8002978 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	e000      	b.n	8002978 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8002976:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800298c:	4618      	mov	r0, r3
 800298e:	3730      	adds	r7, #48	; 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029a4:	f7fe f96e 	bl	8000c84 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029b4:	f7fe f966 	bl	8000c84 <HAL_GetTick>
 80029b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	0d1b      	lsrs	r3, r3, #20
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ca:	e054      	b.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d050      	beq.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d4:	f7fe f956 	bl	8000c84 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d902      	bls.n	80029ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d13d      	bne.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a02:	d111      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d004      	beq.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a16:	d107      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a30:	d10f      	bne.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e017      	b.n	8002a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d19b      	bne.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000002c 	.word	0x2000002c

08002aa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab8:	d111      	bne.n	8002ade <SPI_EndRxTransaction+0x3a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac2:	d004      	beq.n	8002ace <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d107      	bne.n	8002ade <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae6:	d12a      	bne.n	8002b3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af0:	d012      	beq.n	8002b18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2200      	movs	r2, #0
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff ff49 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02d      	beq.n	8002b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e026      	b.n	8002b66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2101      	movs	r1, #1
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ff36 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01a      	beq.n	8002b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e013      	b.n	8002b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2101      	movs	r1, #1
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff ff23 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e000      	b.n	8002b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <SPI_EndRxTxTransaction+0x7c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <SPI_EndRxTxTransaction+0x80>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0d5b      	lsrs	r3, r3, #21
 8002b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b9a:	d112      	bne.n	8002bc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff fef4 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e00f      	b.n	8002be2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d0f2      	beq.n	8002bc2 <SPI_EndRxTxTransaction+0x52>
 8002bdc:	e000      	b.n	8002be0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002bde:	bf00      	nop
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000002c 	.word	0x2000002c
 8002bf0:	165e9f81 	.word	0x165e9f81

08002bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e03f      	b.n	8002c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fb40 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f929 	bl	8002e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b08a      	sub	sp, #40	; 0x28
 8002c92:	af02      	add	r7, sp, #8
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d17c      	bne.n	8002da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_UART_Transmit+0x2c>
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e075      	b.n	8002daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_UART_Transmit+0x3e>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e06e      	b.n	8002daa <HAL_UART_Transmit+0x11c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2221      	movs	r2, #33	; 0x21
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ce2:	f7fd ffcf 	bl	8000c84 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfc:	d108      	bne.n	8002d10 <HAL_UART_Transmit+0x82>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e003      	b.n	8002d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d20:	e02a      	b.n	8002d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f840 	bl	8002db2 <UART_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e036      	b.n	8002daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3302      	adds	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	e007      	b.n	8002d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1cf      	bne.n	8002d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2140      	movs	r1, #64	; 0x40
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f810 	bl	8002db2 <UART_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e006      	b.n	8002daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b090      	sub	sp, #64	; 0x40
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc2:	e050      	b.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d04c      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd2:	f7fd ff57 	bl	8000c84 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d241      	bcs.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e02:	637a      	str	r2, [r7, #52]	; 0x34
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e5      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	613b      	str	r3, [r7, #16]
   return(result);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e36:	623a      	str	r2, [r7, #32]
 8002e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	69f9      	ldr	r1, [r7, #28]
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e5      	bne.n	8002e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e00f      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d09f      	beq.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3740      	adds	r7, #64	; 0x40
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b0c0      	sub	sp, #256	; 0x100
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	68d9      	ldr	r1, [r3, #12]
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	ea40 0301 	orr.w	r3, r0, r1
 8002eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ee8:	f021 010c 	bic.w	r1, r1, #12
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	6999      	ldr	r1, [r3, #24]
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	ea40 0301 	orr.w	r3, r0, r1
 8002f16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b8f      	ldr	r3, [pc, #572]	; (800315c <UART_SetConfig+0x2cc>)
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d005      	beq.n	8002f30 <UART_SetConfig+0xa0>
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b8d      	ldr	r3, [pc, #564]	; (8003160 <UART_SetConfig+0x2d0>)
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d104      	bne.n	8002f3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f30:	f7fe ff90 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002f34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f38:	e003      	b.n	8002f42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f3a:	f7fe ff77 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4c:	f040 810c 	bne.w	8003168 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f62:	4622      	mov	r2, r4
 8002f64:	462b      	mov	r3, r5
 8002f66:	1891      	adds	r1, r2, r2
 8002f68:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f6a:	415b      	adcs	r3, r3
 8002f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f72:	4621      	mov	r1, r4
 8002f74:	eb12 0801 	adds.w	r8, r2, r1
 8002f78:	4629      	mov	r1, r5
 8002f7a:	eb43 0901 	adc.w	r9, r3, r1
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f92:	4690      	mov	r8, r2
 8002f94:	4699      	mov	r9, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	eb18 0303 	adds.w	r3, r8, r3
 8002f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fa0:	462b      	mov	r3, r5
 8002fa2:	eb49 0303 	adc.w	r3, r9, r3
 8002fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	18db      	adds	r3, r3, r3
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	eb42 0303 	adc.w	r3, r2, r3
 8002fca:	657b      	str	r3, [r7, #84]	; 0x54
 8002fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fd4:	f7fd f964 	bl	80002a0 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4b61      	ldr	r3, [pc, #388]	; (8003164 <UART_SetConfig+0x2d4>)
 8002fde:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	011c      	lsls	r4, r3, #4
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1891      	adds	r1, r2, r2
 8002ffe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003000:	415b      	adcs	r3, r3
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003008:	4641      	mov	r1, r8
 800300a:	eb12 0a01 	adds.w	sl, r2, r1
 800300e:	4649      	mov	r1, r9
 8003010:	eb43 0b01 	adc.w	fp, r3, r1
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003028:	4692      	mov	sl, r2
 800302a:	469b      	mov	fp, r3
 800302c:	4643      	mov	r3, r8
 800302e:	eb1a 0303 	adds.w	r3, sl, r3
 8003032:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003036:	464b      	mov	r3, r9
 8003038:	eb4b 0303 	adc.w	r3, fp, r3
 800303c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800304c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003054:	460b      	mov	r3, r1
 8003056:	18db      	adds	r3, r3, r3
 8003058:	643b      	str	r3, [r7, #64]	; 0x40
 800305a:	4613      	mov	r3, r2
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	647b      	str	r3, [r7, #68]	; 0x44
 8003062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800306a:	f7fd f919 	bl	80002a0 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4611      	mov	r1, r2
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <UART_SetConfig+0x2d4>)
 8003076:	fba3 2301 	umull	r2, r3, r3, r1
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2264      	movs	r2, #100	; 0x64
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	1acb      	subs	r3, r1, r3
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <UART_SetConfig+0x2d4>)
 800308c:	fba3 2302 	umull	r2, r3, r3, r2
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003098:	441c      	add	r4, r3
 800309a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	1891      	adds	r1, r2, r2
 80030b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030b4:	415b      	adcs	r3, r3
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030bc:	4641      	mov	r1, r8
 80030be:	1851      	adds	r1, r2, r1
 80030c0:	6339      	str	r1, [r7, #48]	; 0x30
 80030c2:	4649      	mov	r1, r9
 80030c4:	414b      	adcs	r3, r1
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030d4:	4659      	mov	r1, fp
 80030d6:	00cb      	lsls	r3, r1, #3
 80030d8:	4651      	mov	r1, sl
 80030da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030de:	4651      	mov	r1, sl
 80030e0:	00ca      	lsls	r2, r1, #3
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	4642      	mov	r2, r8
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030f0:	464b      	mov	r3, r9
 80030f2:	460a      	mov	r2, r1
 80030f4:	eb42 0303 	adc.w	r3, r2, r3
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003108:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800310c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003110:	460b      	mov	r3, r1
 8003112:	18db      	adds	r3, r3, r3
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
 8003116:	4613      	mov	r3, r2
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003126:	f7fd f8bb 	bl	80002a0 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <UART_SetConfig+0x2d4>)
 8003130:	fba3 1302 	umull	r1, r3, r3, r2
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	2164      	movs	r1, #100	; 0x64
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	3332      	adds	r3, #50	; 0x32
 8003142:	4a08      	ldr	r2, [pc, #32]	; (8003164 <UART_SetConfig+0x2d4>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f003 0207 	and.w	r2, r3, #7
 800314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4422      	add	r2, r4
 8003156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003158:	e105      	b.n	8003366 <UART_SetConfig+0x4d6>
 800315a:	bf00      	nop
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400
 8003164:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003172:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800317a:	4642      	mov	r2, r8
 800317c:	464b      	mov	r3, r9
 800317e:	1891      	adds	r1, r2, r2
 8003180:	6239      	str	r1, [r7, #32]
 8003182:	415b      	adcs	r3, r3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800318a:	4641      	mov	r1, r8
 800318c:	1854      	adds	r4, r2, r1
 800318e:	4649      	mov	r1, r9
 8003190:	eb43 0501 	adc.w	r5, r3, r1
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	00eb      	lsls	r3, r5, #3
 800319e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a2:	00e2      	lsls	r2, r4, #3
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	4643      	mov	r3, r8
 80031aa:	18e3      	adds	r3, r4, r3
 80031ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031b0:	464b      	mov	r3, r9
 80031b2:	eb45 0303 	adc.w	r3, r5, r3
 80031b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031d6:	4629      	mov	r1, r5
 80031d8:	008b      	lsls	r3, r1, #2
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e0:	4621      	mov	r1, r4
 80031e2:	008a      	lsls	r2, r1, #2
 80031e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031e8:	f7fd f85a 	bl	80002a0 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4b60      	ldr	r3, [pc, #384]	; (8003374 <UART_SetConfig+0x4e4>)
 80031f2:	fba3 2302 	umull	r2, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	011c      	lsls	r4, r3, #4
 80031fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003204:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	61b9      	str	r1, [r7, #24]
 8003214:	415b      	adcs	r3, r3
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6139      	str	r1, [r7, #16]
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003250:	464b      	mov	r3, r9
 8003252:	460a      	mov	r2, r1
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	67bb      	str	r3, [r7, #120]	; 0x78
 8003266:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003274:	4649      	mov	r1, r9
 8003276:	008b      	lsls	r3, r1, #2
 8003278:	4641      	mov	r1, r8
 800327a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327e:	4641      	mov	r1, r8
 8003280:	008a      	lsls	r2, r1, #2
 8003282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003286:	f7fd f80b 	bl	80002a0 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <UART_SetConfig+0x4e4>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	; 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	3332      	adds	r3, #50	; 0x32
 80032a2:	4a34      	ldr	r2, [pc, #208]	; (8003374 <UART_SetConfig+0x4e4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ae:	441c      	add	r4, r3
 80032b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b4:	2200      	movs	r2, #0
 80032b6:	673b      	str	r3, [r7, #112]	; 0x70
 80032b8:	677a      	str	r2, [r7, #116]	; 0x74
 80032ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032be:	4642      	mov	r2, r8
 80032c0:	464b      	mov	r3, r9
 80032c2:	1891      	adds	r1, r2, r2
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	415b      	adcs	r3, r3
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ce:	4641      	mov	r1, r8
 80032d0:	1851      	adds	r1, r2, r1
 80032d2:	6039      	str	r1, [r7, #0]
 80032d4:	4649      	mov	r1, r9
 80032d6:	414b      	adcs	r3, r1
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032e6:	4659      	mov	r1, fp
 80032e8:	00cb      	lsls	r3, r1, #3
 80032ea:	4651      	mov	r1, sl
 80032ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f0:	4651      	mov	r1, sl
 80032f2:	00ca      	lsls	r2, r1, #3
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	4642      	mov	r2, r8
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003300:	464b      	mov	r3, r9
 8003302:	460a      	mov	r2, r1
 8003304:	eb42 0303 	adc.w	r3, r2, r3
 8003308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	663b      	str	r3, [r7, #96]	; 0x60
 8003314:	667a      	str	r2, [r7, #100]	; 0x64
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003322:	4649      	mov	r1, r9
 8003324:	008b      	lsls	r3, r1, #2
 8003326:	4641      	mov	r1, r8
 8003328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332c:	4641      	mov	r1, r8
 800332e:	008a      	lsls	r2, r1, #2
 8003330:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003334:	f7fc ffb4 	bl	80002a0 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <UART_SetConfig+0x4e4>)
 800333e:	fba3 1302 	umull	r1, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2164      	movs	r1, #100	; 0x64
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <UART_SetConfig+0x4e4>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4422      	add	r2, r4
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	bf00      	nop
 8003368:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800336c:	46bd      	mov	sp, r7
 800336e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003372:	bf00      	nop
 8003374:	51eb851f 	.word	0x51eb851f

08003378 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 800337e:	f7fd fc21 	bl	8000bc4 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003382:	f000 f86f 	bl	8003464 <SystemClock_Config>

	/* Initialize BSP Led for LED2 and LED3*/
	BSP_LED_Init(LED2);
 8003386:	2001      	movs	r0, #1
 8003388:	f7fd fb18 	bl	80009bc <BSP_LED_Init>

	/* Initialize UART port */
	if (!uartInit()) {
 800338c:	f7fd fa98 	bl	80008c0 <uartInit>
 8003390:	4603      	mov	r3, r0
 8003392:	f083 0301 	eor.w	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <main+0x28>
		Error_Handler();
 800339c:	f000 f8c4 	bl	8003528 <Error_Handler>
	}

	/* Initialize ADS1293 device */
	if (ads1293Init(0) != ADS1293_OK) {
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fd f8ff 	bl	80005a4 <ads1293Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <main+0x38>
		Error_Handler();
 80033ac:	f000 f8bc 	bl	8003528 <Error_Handler>
	}

	/* ID data buffer */
	static uint8_t idData = 0;
	ads1293ReadID(&idData);
 80033b0:	4826      	ldr	r0, [pc, #152]	; (800344c <main+0xd4>)
 80033b2:	f7fd f90c 	bl	80005ce <ads1293ReadID>

	/* ID buffer string */
	static char message[50];

	uartSendString((uint8_t*) "Starting ADS1293 Main Programm:\r\n");
 80033b6:	4826      	ldr	r0, [pc, #152]	; (8003450 <main+0xd8>)
 80033b8:	f7fd fae6 	bl	8000988 <uartSendString>
	sprintf(message, "ADS1293 ID: 0x%x\r\n\n", idData);
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <main+0xd4>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4924      	ldr	r1, [pc, #144]	; (8003454 <main+0xdc>)
 80033c4:	4824      	ldr	r0, [pc, #144]	; (8003458 <main+0xe0>)
 80033c6:	f000 f90d 	bl	80035e4 <siprintf>
	uartSendString((uint8_t*) message);
 80033ca:	4823      	ldr	r0, [pc, #140]	; (8003458 <main+0xe0>)
 80033cc:	f7fd fadc 	bl	8000988 <uartSendString>

	/* Init CH1 CH2 ECG data conversion */
	ads1293Set3LeadECG();
 80033d0:	f7fd f983 	bl	80006da <ads1293Set3LeadECG>
	/* ECG Data buffer */
	uint8_t ecgData[7];

	/* Infinite loop */
	while (1) {
		if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)) {
 80033d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d8:	4820      	ldr	r0, [pc, #128]	; (800345c <main+0xe4>)
 80033da:	f7fd ff15 	bl	8001208 <HAL_GPIO_ReadPin>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f7      	bne.n	80033d4 <main+0x5c>
			ads1293ReadDataLoop(ecgData, 6);
 80033e4:	463b      	mov	r3, r7
 80033e6:	2106      	movs	r1, #6
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f9b6 	bl	800075a <ads1293ReadDataLoop>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[0]);
 80033ee:	783b      	ldrb	r3, [r7, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <main+0xe8>)
 80033f4:	4818      	ldr	r0, [pc, #96]	; (8003458 <main+0xe0>)
 80033f6:	f000 f8f5 	bl	80035e4 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[1]);
 80033fa:	787b      	ldrb	r3, [r7, #1]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4918      	ldr	r1, [pc, #96]	; (8003460 <main+0xe8>)
 8003400:	4815      	ldr	r0, [pc, #84]	; (8003458 <main+0xe0>)
 8003402:	f000 f8ef 	bl	80035e4 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[2]);
 8003406:	78bb      	ldrb	r3, [r7, #2]
 8003408:	461a      	mov	r2, r3
 800340a:	4915      	ldr	r1, [pc, #84]	; (8003460 <main+0xe8>)
 800340c:	4812      	ldr	r0, [pc, #72]	; (8003458 <main+0xe0>)
 800340e:	f000 f8e9 	bl	80035e4 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[3]);
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	461a      	mov	r2, r3
 8003416:	4912      	ldr	r1, [pc, #72]	; (8003460 <main+0xe8>)
 8003418:	480f      	ldr	r0, [pc, #60]	; (8003458 <main+0xe0>)
 800341a:	f000 f8e3 	bl	80035e4 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[4]);
 800341e:	793b      	ldrb	r3, [r7, #4]
 8003420:	461a      	mov	r2, r3
 8003422:	490f      	ldr	r1, [pc, #60]	; (8003460 <main+0xe8>)
 8003424:	480c      	ldr	r0, [pc, #48]	; (8003458 <main+0xe0>)
 8003426:	f000 f8dd 	bl	80035e4 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[5]);
 800342a:	797b      	ldrb	r3, [r7, #5]
 800342c:	461a      	mov	r2, r3
 800342e:	490c      	ldr	r1, [pc, #48]	; (8003460 <main+0xe8>)
 8003430:	4809      	ldr	r0, [pc, #36]	; (8003458 <main+0xe0>)
 8003432:	f000 f8d7 	bl	80035e4 <siprintf>
			sprintf(message, "ADS1293 ECG Data: %d\r\n", ecgData[6]);
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	461a      	mov	r2, r3
 800343a:	4909      	ldr	r1, [pc, #36]	; (8003460 <main+0xe8>)
 800343c:	4806      	ldr	r0, [pc, #24]	; (8003458 <main+0xe0>)
 800343e:	f000 f8d1 	bl	80035e4 <siprintf>
			uartSendString((uint8_t*) message);
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <main+0xe0>)
 8003444:	f7fd faa0 	bl	8000988 <uartSendString>
		if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)) {
 8003448:	e7c4      	b.n	80033d4 <main+0x5c>
 800344a:	bf00      	nop
 800344c:	2000015c 	.word	0x2000015c
 8003450:	08003f84 	.word	0x08003f84
 8003454:	08003fa8 	.word	0x08003fa8
 8003458:	20000160 	.word	0x20000160
 800345c:	40020c00 	.word	0x40020c00
 8003460:	08003fbc 	.word	0x08003fbc

08003464 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b094      	sub	sp, #80	; 0x50
 8003468:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <SystemClock_Config+0xbc>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a2b      	ldr	r2, [pc, #172]	; (8003520 <SystemClock_Config+0xbc>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <SystemClock_Config+0xbc>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <SystemClock_Config+0xc0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a25      	ldr	r2, [pc, #148]	; (8003524 <SystemClock_Config+0xc0>)
 8003490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <SystemClock_Config+0xc0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034a2:	2301      	movs	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80034a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80034aa:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ac:	2302      	movs	r3, #2
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80034b6:	2308      	movs	r3, #8
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80034ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034c0:	2302      	movs	r3, #2
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80034c4:	2307      	movs	r3, #7
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe f83d 	bl	800154c <HAL_RCC_OscConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 80034d8:	f000 f826 	bl	8003528 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80034dc:	f7fd ffe6 	bl	80014ac <HAL_PWREx_EnableOverDrive>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 80034e6:	f000 f81f 	bl	8003528 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80034ea:	230f      	movs	r3, #15
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ee:	2302      	movs	r3, #2
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034f2:	2300      	movs	r3, #0
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003500:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003506:	2105      	movs	r1, #5
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fa97 	bl	8001a3c <HAL_RCC_ClockConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 8003514:	f000 f808 	bl	8003528 <Error_Handler>
	}
}
 8003518:	bf00      	nop
 800351a:	3750      	adds	r7, #80	; 0x50
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000

08003528 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	while (1) {
		BSP_LED_Toggle(LED2);
 800352c:	2001      	movs	r0, #1
 800352e:	f7fd fa95 	bl	8000a5c <BSP_LED_Toggle>
		HAL_Delay(500);
 8003532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003536:	f7fd fbb1 	bl	8000c9c <HAL_Delay>
		BSP_LED_Toggle(LED2);
 800353a:	e7f7      	b.n	800352c <Error_Handler+0x4>

0800353c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800353c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003574 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003542:	e003      	b.n	800354c <LoopCopyDataInit>

08003544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800354a:	3104      	adds	r1, #4

0800354c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800354c:	480b      	ldr	r0, [pc, #44]	; (800357c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003554:	d3f6      	bcc.n	8003544 <CopyDataInit>
  ldr  r2, =_sbss
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003558:	e002      	b.n	8003560 <LoopFillZerobss>

0800355a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800355a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800355c:	f842 3b04 	str.w	r3, [r2], #4

08003560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003564:	d3f9      	bcc.n	800355a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003566:	f7fd fa93 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356a:	f000 f817 	bl	800359c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356e:	f7ff ff03 	bl	8003378 <main>
  bx  lr    
 8003572:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003574:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003578:	08004038 	.word	0x08004038
  ldr  r0, =_sdata
 800357c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003580:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8003584:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8003588:	200001a4 	.word	0x200001a4

0800358c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800358c:	e7fe      	b.n	800358c <ADC_IRQHandler>
	...

08003590 <__errno>:
 8003590:	4b01      	ldr	r3, [pc, #4]	; (8003598 <__errno+0x8>)
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000038 	.word	0x20000038

0800359c <__libc_init_array>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	4d0d      	ldr	r5, [pc, #52]	; (80035d4 <__libc_init_array+0x38>)
 80035a0:	4c0d      	ldr	r4, [pc, #52]	; (80035d8 <__libc_init_array+0x3c>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	2600      	movs	r6, #0
 80035a8:	42a6      	cmp	r6, r4
 80035aa:	d109      	bne.n	80035c0 <__libc_init_array+0x24>
 80035ac:	4d0b      	ldr	r5, [pc, #44]	; (80035dc <__libc_init_array+0x40>)
 80035ae:	4c0c      	ldr	r4, [pc, #48]	; (80035e0 <__libc_init_array+0x44>)
 80035b0:	f000 fc86 	bl	8003ec0 <_init>
 80035b4:	1b64      	subs	r4, r4, r5
 80035b6:	10a4      	asrs	r4, r4, #2
 80035b8:	2600      	movs	r6, #0
 80035ba:	42a6      	cmp	r6, r4
 80035bc:	d105      	bne.n	80035ca <__libc_init_array+0x2e>
 80035be:	bd70      	pop	{r4, r5, r6, pc}
 80035c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c4:	4798      	blx	r3
 80035c6:	3601      	adds	r6, #1
 80035c8:	e7ee      	b.n	80035a8 <__libc_init_array+0xc>
 80035ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ce:	4798      	blx	r3
 80035d0:	3601      	adds	r6, #1
 80035d2:	e7f2      	b.n	80035ba <__libc_init_array+0x1e>
 80035d4:	08004030 	.word	0x08004030
 80035d8:	08004030 	.word	0x08004030
 80035dc:	08004030 	.word	0x08004030
 80035e0:	08004034 	.word	0x08004034

080035e4 <siprintf>:
 80035e4:	b40e      	push	{r1, r2, r3}
 80035e6:	b500      	push	{lr}
 80035e8:	b09c      	sub	sp, #112	; 0x70
 80035ea:	ab1d      	add	r3, sp, #116	; 0x74
 80035ec:	9002      	str	r0, [sp, #8]
 80035ee:	9006      	str	r0, [sp, #24]
 80035f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035f4:	4809      	ldr	r0, [pc, #36]	; (800361c <siprintf+0x38>)
 80035f6:	9107      	str	r1, [sp, #28]
 80035f8:	9104      	str	r1, [sp, #16]
 80035fa:	4909      	ldr	r1, [pc, #36]	; (8003620 <siprintf+0x3c>)
 80035fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003600:	9105      	str	r1, [sp, #20]
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	a902      	add	r1, sp, #8
 8003608:	f000 f868 	bl	80036dc <_svfiprintf_r>
 800360c:	9b02      	ldr	r3, [sp, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	b01c      	add	sp, #112	; 0x70
 8003614:	f85d eb04 	ldr.w	lr, [sp], #4
 8003618:	b003      	add	sp, #12
 800361a:	4770      	bx	lr
 800361c:	20000038 	.word	0x20000038
 8003620:	ffff0208 	.word	0xffff0208

08003624 <__ssputs_r>:
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	688e      	ldr	r6, [r1, #8]
 800362a:	429e      	cmp	r6, r3
 800362c:	4682      	mov	sl, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4690      	mov	r8, r2
 8003632:	461f      	mov	r7, r3
 8003634:	d838      	bhi.n	80036a8 <__ssputs_r+0x84>
 8003636:	898a      	ldrh	r2, [r1, #12]
 8003638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800363c:	d032      	beq.n	80036a4 <__ssputs_r+0x80>
 800363e:	6825      	ldr	r5, [r4, #0]
 8003640:	6909      	ldr	r1, [r1, #16]
 8003642:	eba5 0901 	sub.w	r9, r5, r1
 8003646:	6965      	ldr	r5, [r4, #20]
 8003648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800364c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003650:	3301      	adds	r3, #1
 8003652:	444b      	add	r3, r9
 8003654:	106d      	asrs	r5, r5, #1
 8003656:	429d      	cmp	r5, r3
 8003658:	bf38      	it	cc
 800365a:	461d      	movcc	r5, r3
 800365c:	0553      	lsls	r3, r2, #21
 800365e:	d531      	bpl.n	80036c4 <__ssputs_r+0xa0>
 8003660:	4629      	mov	r1, r5
 8003662:	f000 fb63 	bl	8003d2c <_malloc_r>
 8003666:	4606      	mov	r6, r0
 8003668:	b950      	cbnz	r0, 8003680 <__ssputs_r+0x5c>
 800366a:	230c      	movs	r3, #12
 800366c:	f8ca 3000 	str.w	r3, [sl]
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	6921      	ldr	r1, [r4, #16]
 8003682:	464a      	mov	r2, r9
 8003684:	f000 fabe 	bl	8003c04 <memcpy>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	6126      	str	r6, [r4, #16]
 8003696:	6165      	str	r5, [r4, #20]
 8003698:	444e      	add	r6, r9
 800369a:	eba5 0509 	sub.w	r5, r5, r9
 800369e:	6026      	str	r6, [r4, #0]
 80036a0:	60a5      	str	r5, [r4, #8]
 80036a2:	463e      	mov	r6, r7
 80036a4:	42be      	cmp	r6, r7
 80036a6:	d900      	bls.n	80036aa <__ssputs_r+0x86>
 80036a8:	463e      	mov	r6, r7
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	4632      	mov	r2, r6
 80036ae:	4641      	mov	r1, r8
 80036b0:	f000 fab6 	bl	8003c20 <memmove>
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	1b9b      	subs	r3, r3, r6
 80036b8:	60a3      	str	r3, [r4, #8]
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4433      	add	r3, r6
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	2000      	movs	r0, #0
 80036c2:	e7db      	b.n	800367c <__ssputs_r+0x58>
 80036c4:	462a      	mov	r2, r5
 80036c6:	f000 fba5 	bl	8003e14 <_realloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1e1      	bne.n	8003694 <__ssputs_r+0x70>
 80036d0:	6921      	ldr	r1, [r4, #16]
 80036d2:	4650      	mov	r0, sl
 80036d4:	f000 fabe 	bl	8003c54 <_free_r>
 80036d8:	e7c7      	b.n	800366a <__ssputs_r+0x46>
	...

080036dc <_svfiprintf_r>:
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	4698      	mov	r8, r3
 80036e2:	898b      	ldrh	r3, [r1, #12]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	b09d      	sub	sp, #116	; 0x74
 80036e8:	4607      	mov	r7, r0
 80036ea:	460d      	mov	r5, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	d50e      	bpl.n	800370e <_svfiprintf_r+0x32>
 80036f0:	690b      	ldr	r3, [r1, #16]
 80036f2:	b963      	cbnz	r3, 800370e <_svfiprintf_r+0x32>
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	f000 fb19 	bl	8003d2c <_malloc_r>
 80036fa:	6028      	str	r0, [r5, #0]
 80036fc:	6128      	str	r0, [r5, #16]
 80036fe:	b920      	cbnz	r0, 800370a <_svfiprintf_r+0x2e>
 8003700:	230c      	movs	r3, #12
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	e0d1      	b.n	80038ae <_svfiprintf_r+0x1d2>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	616b      	str	r3, [r5, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	9309      	str	r3, [sp, #36]	; 0x24
 8003712:	2320      	movs	r3, #32
 8003714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003718:	f8cd 800c 	str.w	r8, [sp, #12]
 800371c:	2330      	movs	r3, #48	; 0x30
 800371e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038c8 <_svfiprintf_r+0x1ec>
 8003722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003726:	f04f 0901 	mov.w	r9, #1
 800372a:	4623      	mov	r3, r4
 800372c:	469a      	mov	sl, r3
 800372e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003732:	b10a      	cbz	r2, 8003738 <_svfiprintf_r+0x5c>
 8003734:	2a25      	cmp	r2, #37	; 0x25
 8003736:	d1f9      	bne.n	800372c <_svfiprintf_r+0x50>
 8003738:	ebba 0b04 	subs.w	fp, sl, r4
 800373c:	d00b      	beq.n	8003756 <_svfiprintf_r+0x7a>
 800373e:	465b      	mov	r3, fp
 8003740:	4622      	mov	r2, r4
 8003742:	4629      	mov	r1, r5
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ff6d 	bl	8003624 <__ssputs_r>
 800374a:	3001      	adds	r0, #1
 800374c:	f000 80aa 	beq.w	80038a4 <_svfiprintf_r+0x1c8>
 8003750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003752:	445a      	add	r2, fp
 8003754:	9209      	str	r2, [sp, #36]	; 0x24
 8003756:	f89a 3000 	ldrb.w	r3, [sl]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80a2 	beq.w	80038a4 <_svfiprintf_r+0x1c8>
 8003760:	2300      	movs	r3, #0
 8003762:	f04f 32ff 	mov.w	r2, #4294967295
 8003766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376a:	f10a 0a01 	add.w	sl, sl, #1
 800376e:	9304      	str	r3, [sp, #16]
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003776:	931a      	str	r3, [sp, #104]	; 0x68
 8003778:	4654      	mov	r4, sl
 800377a:	2205      	movs	r2, #5
 800377c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003780:	4851      	ldr	r0, [pc, #324]	; (80038c8 <_svfiprintf_r+0x1ec>)
 8003782:	f7fc fd3d 	bl	8000200 <memchr>
 8003786:	9a04      	ldr	r2, [sp, #16]
 8003788:	b9d8      	cbnz	r0, 80037c2 <_svfiprintf_r+0xe6>
 800378a:	06d0      	lsls	r0, r2, #27
 800378c:	bf44      	itt	mi
 800378e:	2320      	movmi	r3, #32
 8003790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003794:	0711      	lsls	r1, r2, #28
 8003796:	bf44      	itt	mi
 8003798:	232b      	movmi	r3, #43	; 0x2b
 800379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800379e:	f89a 3000 	ldrb.w	r3, [sl]
 80037a2:	2b2a      	cmp	r3, #42	; 0x2a
 80037a4:	d015      	beq.n	80037d2 <_svfiprintf_r+0xf6>
 80037a6:	9a07      	ldr	r2, [sp, #28]
 80037a8:	4654      	mov	r4, sl
 80037aa:	2000      	movs	r0, #0
 80037ac:	f04f 0c0a 	mov.w	ip, #10
 80037b0:	4621      	mov	r1, r4
 80037b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b6:	3b30      	subs	r3, #48	; 0x30
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d94e      	bls.n	800385a <_svfiprintf_r+0x17e>
 80037bc:	b1b0      	cbz	r0, 80037ec <_svfiprintf_r+0x110>
 80037be:	9207      	str	r2, [sp, #28]
 80037c0:	e014      	b.n	80037ec <_svfiprintf_r+0x110>
 80037c2:	eba0 0308 	sub.w	r3, r0, r8
 80037c6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	9304      	str	r3, [sp, #16]
 80037ce:	46a2      	mov	sl, r4
 80037d0:	e7d2      	b.n	8003778 <_svfiprintf_r+0x9c>
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	9103      	str	r1, [sp, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfbb      	ittet	lt
 80037de:	425b      	neglt	r3, r3
 80037e0:	f042 0202 	orrlt.w	r2, r2, #2
 80037e4:	9307      	strge	r3, [sp, #28]
 80037e6:	9307      	strlt	r3, [sp, #28]
 80037e8:	bfb8      	it	lt
 80037ea:	9204      	strlt	r2, [sp, #16]
 80037ec:	7823      	ldrb	r3, [r4, #0]
 80037ee:	2b2e      	cmp	r3, #46	; 0x2e
 80037f0:	d10c      	bne.n	800380c <_svfiprintf_r+0x130>
 80037f2:	7863      	ldrb	r3, [r4, #1]
 80037f4:	2b2a      	cmp	r3, #42	; 0x2a
 80037f6:	d135      	bne.n	8003864 <_svfiprintf_r+0x188>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	9203      	str	r2, [sp, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	bfb8      	it	lt
 8003804:	f04f 33ff 	movlt.w	r3, #4294967295
 8003808:	3402      	adds	r4, #2
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038d8 <_svfiprintf_r+0x1fc>
 8003810:	7821      	ldrb	r1, [r4, #0]
 8003812:	2203      	movs	r2, #3
 8003814:	4650      	mov	r0, sl
 8003816:	f7fc fcf3 	bl	8000200 <memchr>
 800381a:	b140      	cbz	r0, 800382e <_svfiprintf_r+0x152>
 800381c:	2340      	movs	r3, #64	; 0x40
 800381e:	eba0 000a 	sub.w	r0, r0, sl
 8003822:	fa03 f000 	lsl.w	r0, r3, r0
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	4303      	orrs	r3, r0
 800382a:	3401      	adds	r4, #1
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003832:	4826      	ldr	r0, [pc, #152]	; (80038cc <_svfiprintf_r+0x1f0>)
 8003834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003838:	2206      	movs	r2, #6
 800383a:	f7fc fce1 	bl	8000200 <memchr>
 800383e:	2800      	cmp	r0, #0
 8003840:	d038      	beq.n	80038b4 <_svfiprintf_r+0x1d8>
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <_svfiprintf_r+0x1f4>)
 8003844:	bb1b      	cbnz	r3, 800388e <_svfiprintf_r+0x1b2>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	3307      	adds	r3, #7
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	3308      	adds	r3, #8
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003854:	4433      	add	r3, r6
 8003856:	9309      	str	r3, [sp, #36]	; 0x24
 8003858:	e767      	b.n	800372a <_svfiprintf_r+0x4e>
 800385a:	fb0c 3202 	mla	r2, ip, r2, r3
 800385e:	460c      	mov	r4, r1
 8003860:	2001      	movs	r0, #1
 8003862:	e7a5      	b.n	80037b0 <_svfiprintf_r+0xd4>
 8003864:	2300      	movs	r3, #0
 8003866:	3401      	adds	r4, #1
 8003868:	9305      	str	r3, [sp, #20]
 800386a:	4619      	mov	r1, r3
 800386c:	f04f 0c0a 	mov.w	ip, #10
 8003870:	4620      	mov	r0, r4
 8003872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003876:	3a30      	subs	r2, #48	; 0x30
 8003878:	2a09      	cmp	r2, #9
 800387a:	d903      	bls.n	8003884 <_svfiprintf_r+0x1a8>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0c5      	beq.n	800380c <_svfiprintf_r+0x130>
 8003880:	9105      	str	r1, [sp, #20]
 8003882:	e7c3      	b.n	800380c <_svfiprintf_r+0x130>
 8003884:	fb0c 2101 	mla	r1, ip, r1, r2
 8003888:	4604      	mov	r4, r0
 800388a:	2301      	movs	r3, #1
 800388c:	e7f0      	b.n	8003870 <_svfiprintf_r+0x194>
 800388e:	ab03      	add	r3, sp, #12
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	462a      	mov	r2, r5
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <_svfiprintf_r+0x1f8>)
 8003896:	a904      	add	r1, sp, #16
 8003898:	4638      	mov	r0, r7
 800389a:	f3af 8000 	nop.w
 800389e:	1c42      	adds	r2, r0, #1
 80038a0:	4606      	mov	r6, r0
 80038a2:	d1d6      	bne.n	8003852 <_svfiprintf_r+0x176>
 80038a4:	89ab      	ldrh	r3, [r5, #12]
 80038a6:	065b      	lsls	r3, r3, #25
 80038a8:	f53f af2c 	bmi.w	8003704 <_svfiprintf_r+0x28>
 80038ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ae:	b01d      	add	sp, #116	; 0x74
 80038b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b4:	ab03      	add	r3, sp, #12
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	462a      	mov	r2, r5
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <_svfiprintf_r+0x1f8>)
 80038bc:	a904      	add	r1, sp, #16
 80038be:	4638      	mov	r0, r7
 80038c0:	f000 f87a 	bl	80039b8 <_printf_i>
 80038c4:	e7eb      	b.n	800389e <_svfiprintf_r+0x1c2>
 80038c6:	bf00      	nop
 80038c8:	08003ff4 	.word	0x08003ff4
 80038cc:	08003ffe 	.word	0x08003ffe
 80038d0:	00000000 	.word	0x00000000
 80038d4:	08003625 	.word	0x08003625
 80038d8:	08003ffa 	.word	0x08003ffa

080038dc <_printf_common>:
 80038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	4616      	mov	r6, r2
 80038e2:	4699      	mov	r9, r3
 80038e4:	688a      	ldr	r2, [r1, #8]
 80038e6:	690b      	ldr	r3, [r1, #16]
 80038e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bfb8      	it	lt
 80038f0:	4613      	movlt	r3, r2
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f8:	4607      	mov	r7, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	b10a      	cbz	r2, 8003902 <_printf_common+0x26>
 80038fe:	3301      	adds	r3, #1
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	0699      	lsls	r1, r3, #26
 8003906:	bf42      	ittt	mi
 8003908:	6833      	ldrmi	r3, [r6, #0]
 800390a:	3302      	addmi	r3, #2
 800390c:	6033      	strmi	r3, [r6, #0]
 800390e:	6825      	ldr	r5, [r4, #0]
 8003910:	f015 0506 	ands.w	r5, r5, #6
 8003914:	d106      	bne.n	8003924 <_printf_common+0x48>
 8003916:	f104 0a19 	add.w	sl, r4, #25
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	6832      	ldr	r2, [r6, #0]
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	42ab      	cmp	r3, r5
 8003922:	dc26      	bgt.n	8003972 <_printf_common+0x96>
 8003924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003928:	1e13      	subs	r3, r2, #0
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	bf18      	it	ne
 800392e:	2301      	movne	r3, #1
 8003930:	0692      	lsls	r2, r2, #26
 8003932:	d42b      	bmi.n	800398c <_printf_common+0xb0>
 8003934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	3001      	adds	r0, #1
 8003940:	d01e      	beq.n	8003980 <_printf_common+0xa4>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	68e5      	ldr	r5, [r4, #12]
 8003946:	6832      	ldr	r2, [r6, #0]
 8003948:	f003 0306 	and.w	r3, r3, #6
 800394c:	2b04      	cmp	r3, #4
 800394e:	bf08      	it	eq
 8003950:	1aad      	subeq	r5, r5, r2
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	6922      	ldr	r2, [r4, #16]
 8003956:	bf0c      	ite	eq
 8003958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800395c:	2500      	movne	r5, #0
 800395e:	4293      	cmp	r3, r2
 8003960:	bfc4      	itt	gt
 8003962:	1a9b      	subgt	r3, r3, r2
 8003964:	18ed      	addgt	r5, r5, r3
 8003966:	2600      	movs	r6, #0
 8003968:	341a      	adds	r4, #26
 800396a:	42b5      	cmp	r5, r6
 800396c:	d11a      	bne.n	80039a4 <_printf_common+0xc8>
 800396e:	2000      	movs	r0, #0
 8003970:	e008      	b.n	8003984 <_printf_common+0xa8>
 8003972:	2301      	movs	r3, #1
 8003974:	4652      	mov	r2, sl
 8003976:	4649      	mov	r1, r9
 8003978:	4638      	mov	r0, r7
 800397a:	47c0      	blx	r8
 800397c:	3001      	adds	r0, #1
 800397e:	d103      	bne.n	8003988 <_printf_common+0xac>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003988:	3501      	adds	r5, #1
 800398a:	e7c6      	b.n	800391a <_printf_common+0x3e>
 800398c:	18e1      	adds	r1, r4, r3
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	2030      	movs	r0, #48	; 0x30
 8003992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003996:	4422      	add	r2, r4
 8003998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800399c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a0:	3302      	adds	r3, #2
 80039a2:	e7c7      	b.n	8003934 <_printf_common+0x58>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4622      	mov	r2, r4
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0e6      	beq.n	8003980 <_printf_common+0xa4>
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7d9      	b.n	800396a <_printf_common+0x8e>
	...

080039b8 <_printf_i>:
 80039b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	7e0f      	ldrb	r7, [r1, #24]
 80039be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039c0:	2f78      	cmp	r7, #120	; 0x78
 80039c2:	4691      	mov	r9, r2
 80039c4:	4680      	mov	r8, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	469a      	mov	sl, r3
 80039ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ce:	d807      	bhi.n	80039e0 <_printf_i+0x28>
 80039d0:	2f62      	cmp	r7, #98	; 0x62
 80039d2:	d80a      	bhi.n	80039ea <_printf_i+0x32>
 80039d4:	2f00      	cmp	r7, #0
 80039d6:	f000 80d8 	beq.w	8003b8a <_printf_i+0x1d2>
 80039da:	2f58      	cmp	r7, #88	; 0x58
 80039dc:	f000 80a3 	beq.w	8003b26 <_printf_i+0x16e>
 80039e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e8:	e03a      	b.n	8003a60 <_printf_i+0xa8>
 80039ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ee:	2b15      	cmp	r3, #21
 80039f0:	d8f6      	bhi.n	80039e0 <_printf_i+0x28>
 80039f2:	a101      	add	r1, pc, #4	; (adr r1, 80039f8 <_printf_i+0x40>)
 80039f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a65 	.word	0x08003a65
 8003a00:	080039e1 	.word	0x080039e1
 8003a04:	080039e1 	.word	0x080039e1
 8003a08:	080039e1 	.word	0x080039e1
 8003a0c:	080039e1 	.word	0x080039e1
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	080039e1 	.word	0x080039e1
 8003a18:	080039e1 	.word	0x080039e1
 8003a1c:	080039e1 	.word	0x080039e1
 8003a20:	080039e1 	.word	0x080039e1
 8003a24:	08003b71 	.word	0x08003b71
 8003a28:	08003a95 	.word	0x08003a95
 8003a2c:	08003b53 	.word	0x08003b53
 8003a30:	080039e1 	.word	0x080039e1
 8003a34:	080039e1 	.word	0x080039e1
 8003a38:	08003b93 	.word	0x08003b93
 8003a3c:	080039e1 	.word	0x080039e1
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	080039e1 	.word	0x080039e1
 8003a48:	080039e1 	.word	0x080039e1
 8003a4c:	08003b5b 	.word	0x08003b5b
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	602a      	str	r2, [r5, #0]
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0a3      	b.n	8003bac <_printf_i+0x1f4>
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	6829      	ldr	r1, [r5, #0]
 8003a68:	0606      	lsls	r6, r0, #24
 8003a6a:	f101 0304 	add.w	r3, r1, #4
 8003a6e:	d50a      	bpl.n	8003a86 <_printf_i+0xce>
 8003a70:	680e      	ldr	r6, [r1, #0]
 8003a72:	602b      	str	r3, [r5, #0]
 8003a74:	2e00      	cmp	r6, #0
 8003a76:	da03      	bge.n	8003a80 <_printf_i+0xc8>
 8003a78:	232d      	movs	r3, #45	; 0x2d
 8003a7a:	4276      	negs	r6, r6
 8003a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a80:	485e      	ldr	r0, [pc, #376]	; (8003bfc <_printf_i+0x244>)
 8003a82:	230a      	movs	r3, #10
 8003a84:	e019      	b.n	8003aba <_printf_i+0x102>
 8003a86:	680e      	ldr	r6, [r1, #0]
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a8e:	bf18      	it	ne
 8003a90:	b236      	sxthne	r6, r6
 8003a92:	e7ef      	b.n	8003a74 <_printf_i+0xbc>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	1d19      	adds	r1, r3, #4
 8003a9a:	6029      	str	r1, [r5, #0]
 8003a9c:	0601      	lsls	r1, r0, #24
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0xec>
 8003aa0:	681e      	ldr	r6, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_printf_i+0xf2>
 8003aa4:	0646      	lsls	r6, r0, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0xe8>
 8003aa8:	881e      	ldrh	r6, [r3, #0]
 8003aaa:	4854      	ldr	r0, [pc, #336]	; (8003bfc <_printf_i+0x244>)
 8003aac:	2f6f      	cmp	r7, #111	; 0x6f
 8003aae:	bf0c      	ite	eq
 8003ab0:	2308      	moveq	r3, #8
 8003ab2:	230a      	movne	r3, #10
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aba:	6865      	ldr	r5, [r4, #4]
 8003abc:	60a5      	str	r5, [r4, #8]
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	bfa2      	ittt	ge
 8003ac2:	6821      	ldrge	r1, [r4, #0]
 8003ac4:	f021 0104 	bicge.w	r1, r1, #4
 8003ac8:	6021      	strge	r1, [r4, #0]
 8003aca:	b90e      	cbnz	r6, 8003ad0 <_printf_i+0x118>
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	d04d      	beq.n	8003b6c <_printf_i+0x1b4>
 8003ad0:	4615      	mov	r5, r2
 8003ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8003ada:	5dc7      	ldrb	r7, [r0, r7]
 8003adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ae0:	4637      	mov	r7, r6
 8003ae2:	42bb      	cmp	r3, r7
 8003ae4:	460e      	mov	r6, r1
 8003ae6:	d9f4      	bls.n	8003ad2 <_printf_i+0x11a>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d10b      	bne.n	8003b04 <_printf_i+0x14c>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	07de      	lsls	r6, r3, #31
 8003af0:	d508      	bpl.n	8003b04 <_printf_i+0x14c>
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	6861      	ldr	r1, [r4, #4]
 8003af6:	4299      	cmp	r1, r3
 8003af8:	bfde      	ittt	le
 8003afa:	2330      	movle	r3, #48	; 0x30
 8003afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b04:	1b52      	subs	r2, r2, r5
 8003b06:	6122      	str	r2, [r4, #16]
 8003b08:	f8cd a000 	str.w	sl, [sp]
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	aa03      	add	r2, sp, #12
 8003b10:	4621      	mov	r1, r4
 8003b12:	4640      	mov	r0, r8
 8003b14:	f7ff fee2 	bl	80038dc <_printf_common>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d14c      	bne.n	8003bb6 <_printf_i+0x1fe>
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	b004      	add	sp, #16
 8003b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b26:	4835      	ldr	r0, [pc, #212]	; (8003bfc <_printf_i+0x244>)
 8003b28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b2c:	6829      	ldr	r1, [r5, #0]
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b34:	6029      	str	r1, [r5, #0]
 8003b36:	061d      	lsls	r5, r3, #24
 8003b38:	d514      	bpl.n	8003b64 <_printf_i+0x1ac>
 8003b3a:	07df      	lsls	r7, r3, #31
 8003b3c:	bf44      	itt	mi
 8003b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b42:	6023      	strmi	r3, [r4, #0]
 8003b44:	b91e      	cbnz	r6, 8003b4e <_printf_i+0x196>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f023 0320 	bic.w	r3, r3, #32
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	2310      	movs	r3, #16
 8003b50:	e7b0      	b.n	8003ab4 <_printf_i+0xfc>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	2378      	movs	r3, #120	; 0x78
 8003b5c:	4828      	ldr	r0, [pc, #160]	; (8003c00 <_printf_i+0x248>)
 8003b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b62:	e7e3      	b.n	8003b2c <_printf_i+0x174>
 8003b64:	0659      	lsls	r1, r3, #25
 8003b66:	bf48      	it	mi
 8003b68:	b2b6      	uxthmi	r6, r6
 8003b6a:	e7e6      	b.n	8003b3a <_printf_i+0x182>
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	e7bb      	b.n	8003ae8 <_printf_i+0x130>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	6826      	ldr	r6, [r4, #0]
 8003b74:	6961      	ldr	r1, [r4, #20]
 8003b76:	1d18      	adds	r0, r3, #4
 8003b78:	6028      	str	r0, [r5, #0]
 8003b7a:	0635      	lsls	r5, r6, #24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0x1cc>
 8003b80:	6019      	str	r1, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0x1d2>
 8003b84:	0670      	lsls	r0, r6, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0x1c8>
 8003b88:	8019      	strh	r1, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	4615      	mov	r5, r2
 8003b90:	e7ba      	b.n	8003b08 <_printf_i+0x150>
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fc fb2e 	bl	8000200 <memchr>
 8003ba4:	b108      	cbz	r0, 8003baa <_printf_i+0x1f2>
 8003ba6:	1b40      	subs	r0, r0, r5
 8003ba8:	6060      	str	r0, [r4, #4]
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	e7a8      	b.n	8003b08 <_printf_i+0x150>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	47d0      	blx	sl
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0ab      	beq.n	8003b1c <_printf_i+0x164>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	079b      	lsls	r3, r3, #30
 8003bc8:	d413      	bmi.n	8003bf2 <_printf_i+0x23a>
 8003bca:	68e0      	ldr	r0, [r4, #12]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	4298      	cmp	r0, r3
 8003bd0:	bfb8      	it	lt
 8003bd2:	4618      	movlt	r0, r3
 8003bd4:	e7a4      	b.n	8003b20 <_printf_i+0x168>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d09b      	beq.n	8003b1c <_printf_i+0x164>
 8003be4:	3501      	adds	r5, #1
 8003be6:	68e3      	ldr	r3, [r4, #12]
 8003be8:	9903      	ldr	r1, [sp, #12]
 8003bea:	1a5b      	subs	r3, r3, r1
 8003bec:	42ab      	cmp	r3, r5
 8003bee:	dcf2      	bgt.n	8003bd6 <_printf_i+0x21e>
 8003bf0:	e7eb      	b.n	8003bca <_printf_i+0x212>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	f104 0619 	add.w	r6, r4, #25
 8003bf8:	e7f5      	b.n	8003be6 <_printf_i+0x22e>
 8003bfa:	bf00      	nop
 8003bfc:	08004005 	.word	0x08004005
 8003c00:	08004016 	.word	0x08004016

08003c04 <memcpy>:
 8003c04:	440a      	add	r2, r1
 8003c06:	4291      	cmp	r1, r2
 8003c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c0c:	d100      	bne.n	8003c10 <memcpy+0xc>
 8003c0e:	4770      	bx	lr
 8003c10:	b510      	push	{r4, lr}
 8003c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c1a:	4291      	cmp	r1, r2
 8003c1c:	d1f9      	bne.n	8003c12 <memcpy+0xe>
 8003c1e:	bd10      	pop	{r4, pc}

08003c20 <memmove>:
 8003c20:	4288      	cmp	r0, r1
 8003c22:	b510      	push	{r4, lr}
 8003c24:	eb01 0402 	add.w	r4, r1, r2
 8003c28:	d902      	bls.n	8003c30 <memmove+0x10>
 8003c2a:	4284      	cmp	r4, r0
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	d807      	bhi.n	8003c40 <memmove+0x20>
 8003c30:	1e43      	subs	r3, r0, #1
 8003c32:	42a1      	cmp	r1, r4
 8003c34:	d008      	beq.n	8003c48 <memmove+0x28>
 8003c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c3e:	e7f8      	b.n	8003c32 <memmove+0x12>
 8003c40:	4402      	add	r2, r0
 8003c42:	4601      	mov	r1, r0
 8003c44:	428a      	cmp	r2, r1
 8003c46:	d100      	bne.n	8003c4a <memmove+0x2a>
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c52:	e7f7      	b.n	8003c44 <memmove+0x24>

08003c54 <_free_r>:
 8003c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d044      	beq.n	8003ce4 <_free_r+0x90>
 8003c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c5e:	9001      	str	r0, [sp, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f1a1 0404 	sub.w	r4, r1, #4
 8003c66:	bfb8      	it	lt
 8003c68:	18e4      	addlt	r4, r4, r3
 8003c6a:	f000 f913 	bl	8003e94 <__malloc_lock>
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <_free_r+0x94>)
 8003c70:	9801      	ldr	r0, [sp, #4]
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	b933      	cbnz	r3, 8003c84 <_free_r+0x30>
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	6014      	str	r4, [r2, #0]
 8003c7a:	b003      	add	sp, #12
 8003c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c80:	f000 b90e 	b.w	8003ea0 <__malloc_unlock>
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d908      	bls.n	8003c9a <_free_r+0x46>
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf01      	itttt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	1949      	addeq	r1, r1, r5
 8003c96:	6021      	streq	r1, [r4, #0]
 8003c98:	e7ed      	b.n	8003c76 <_free_r+0x22>
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b10b      	cbz	r3, 8003ca4 <_free_r+0x50>
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	d9fa      	bls.n	8003c9a <_free_r+0x46>
 8003ca4:	6811      	ldr	r1, [r2, #0]
 8003ca6:	1855      	adds	r5, r2, r1
 8003ca8:	42a5      	cmp	r5, r4
 8003caa:	d10b      	bne.n	8003cc4 <_free_r+0x70>
 8003cac:	6824      	ldr	r4, [r4, #0]
 8003cae:	4421      	add	r1, r4
 8003cb0:	1854      	adds	r4, r2, r1
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	d1e0      	bne.n	8003c7a <_free_r+0x26>
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	4421      	add	r1, r4
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	e7da      	b.n	8003c7a <_free_r+0x26>
 8003cc4:	d902      	bls.n	8003ccc <_free_r+0x78>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	6003      	str	r3, [r0, #0]
 8003cca:	e7d6      	b.n	8003c7a <_free_r+0x26>
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	1961      	adds	r1, r4, r5
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf04      	itt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	6063      	str	r3, [r4, #4]
 8003cda:	bf04      	itt	eq
 8003cdc:	1949      	addeq	r1, r1, r5
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	6054      	str	r4, [r2, #4]
 8003ce2:	e7ca      	b.n	8003c7a <_free_r+0x26>
 8003ce4:	b003      	add	sp, #12
 8003ce6:	bd30      	pop	{r4, r5, pc}
 8003ce8:	20000194 	.word	0x20000194

08003cec <sbrk_aligned>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4e0e      	ldr	r6, [pc, #56]	; (8003d28 <sbrk_aligned+0x3c>)
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	6831      	ldr	r1, [r6, #0]
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	b911      	cbnz	r1, 8003cfe <sbrk_aligned+0x12>
 8003cf8:	f000 f8bc 	bl	8003e74 <_sbrk_r>
 8003cfc:	6030      	str	r0, [r6, #0]
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 f8b7 	bl	8003e74 <_sbrk_r>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	d00a      	beq.n	8003d20 <sbrk_aligned+0x34>
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	f024 0403 	bic.w	r4, r4, #3
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d007      	beq.n	8003d24 <sbrk_aligned+0x38>
 8003d14:	1a21      	subs	r1, r4, r0
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 f8ac 	bl	8003e74 <_sbrk_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d101      	bne.n	8003d24 <sbrk_aligned+0x38>
 8003d20:	f04f 34ff 	mov.w	r4, #4294967295
 8003d24:	4620      	mov	r0, r4
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	20000198 	.word	0x20000198

08003d2c <_malloc_r>:
 8003d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d30:	1ccd      	adds	r5, r1, #3
 8003d32:	f025 0503 	bic.w	r5, r5, #3
 8003d36:	3508      	adds	r5, #8
 8003d38:	2d0c      	cmp	r5, #12
 8003d3a:	bf38      	it	cc
 8003d3c:	250c      	movcc	r5, #12
 8003d3e:	2d00      	cmp	r5, #0
 8003d40:	4607      	mov	r7, r0
 8003d42:	db01      	blt.n	8003d48 <_malloc_r+0x1c>
 8003d44:	42a9      	cmp	r1, r5
 8003d46:	d905      	bls.n	8003d54 <_malloc_r+0x28>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	4630      	mov	r0, r6
 8003d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d54:	4e2e      	ldr	r6, [pc, #184]	; (8003e10 <_malloc_r+0xe4>)
 8003d56:	f000 f89d 	bl	8003e94 <__malloc_lock>
 8003d5a:	6833      	ldr	r3, [r6, #0]
 8003d5c:	461c      	mov	r4, r3
 8003d5e:	bb34      	cbnz	r4, 8003dae <_malloc_r+0x82>
 8003d60:	4629      	mov	r1, r5
 8003d62:	4638      	mov	r0, r7
 8003d64:	f7ff ffc2 	bl	8003cec <sbrk_aligned>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	d14d      	bne.n	8003e0a <_malloc_r+0xde>
 8003d6e:	6834      	ldr	r4, [r6, #0]
 8003d70:	4626      	mov	r6, r4
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	d140      	bne.n	8003df8 <_malloc_r+0xcc>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	4631      	mov	r1, r6
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	eb04 0803 	add.w	r8, r4, r3
 8003d80:	f000 f878 	bl	8003e74 <_sbrk_r>
 8003d84:	4580      	cmp	r8, r0
 8003d86:	d13a      	bne.n	8003dfe <_malloc_r+0xd2>
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	3503      	adds	r5, #3
 8003d8c:	1a6d      	subs	r5, r5, r1
 8003d8e:	f025 0503 	bic.w	r5, r5, #3
 8003d92:	3508      	adds	r5, #8
 8003d94:	2d0c      	cmp	r5, #12
 8003d96:	bf38      	it	cc
 8003d98:	250c      	movcc	r5, #12
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f7ff ffa5 	bl	8003cec <sbrk_aligned>
 8003da2:	3001      	adds	r0, #1
 8003da4:	d02b      	beq.n	8003dfe <_malloc_r+0xd2>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	442b      	add	r3, r5
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	e00e      	b.n	8003dcc <_malloc_r+0xa0>
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	1b52      	subs	r2, r2, r5
 8003db2:	d41e      	bmi.n	8003df2 <_malloc_r+0xc6>
 8003db4:	2a0b      	cmp	r2, #11
 8003db6:	d916      	bls.n	8003de6 <_malloc_r+0xba>
 8003db8:	1961      	adds	r1, r4, r5
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	6025      	str	r5, [r4, #0]
 8003dbe:	bf18      	it	ne
 8003dc0:	6059      	strne	r1, [r3, #4]
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	bf08      	it	eq
 8003dc6:	6031      	streq	r1, [r6, #0]
 8003dc8:	5162      	str	r2, [r4, r5]
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f104 060b 	add.w	r6, r4, #11
 8003dd2:	f000 f865 	bl	8003ea0 <__malloc_unlock>
 8003dd6:	f026 0607 	bic.w	r6, r6, #7
 8003dda:	1d23      	adds	r3, r4, #4
 8003ddc:	1af2      	subs	r2, r6, r3
 8003dde:	d0b6      	beq.n	8003d4e <_malloc_r+0x22>
 8003de0:	1b9b      	subs	r3, r3, r6
 8003de2:	50a3      	str	r3, [r4, r2]
 8003de4:	e7b3      	b.n	8003d4e <_malloc_r+0x22>
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	bf0c      	ite	eq
 8003dec:	6032      	streq	r2, [r6, #0]
 8003dee:	605a      	strne	r2, [r3, #4]
 8003df0:	e7ec      	b.n	8003dcc <_malloc_r+0xa0>
 8003df2:	4623      	mov	r3, r4
 8003df4:	6864      	ldr	r4, [r4, #4]
 8003df6:	e7b2      	b.n	8003d5e <_malloc_r+0x32>
 8003df8:	4634      	mov	r4, r6
 8003dfa:	6876      	ldr	r6, [r6, #4]
 8003dfc:	e7b9      	b.n	8003d72 <_malloc_r+0x46>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4638      	mov	r0, r7
 8003e04:	f000 f84c 	bl	8003ea0 <__malloc_unlock>
 8003e08:	e7a1      	b.n	8003d4e <_malloc_r+0x22>
 8003e0a:	6025      	str	r5, [r4, #0]
 8003e0c:	e7de      	b.n	8003dcc <_malloc_r+0xa0>
 8003e0e:	bf00      	nop
 8003e10:	20000194 	.word	0x20000194

08003e14 <_realloc_r>:
 8003e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e18:	4680      	mov	r8, r0
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	460e      	mov	r6, r1
 8003e1e:	b921      	cbnz	r1, 8003e2a <_realloc_r+0x16>
 8003e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e24:	4611      	mov	r1, r2
 8003e26:	f7ff bf81 	b.w	8003d2c <_malloc_r>
 8003e2a:	b92a      	cbnz	r2, 8003e38 <_realloc_r+0x24>
 8003e2c:	f7ff ff12 	bl	8003c54 <_free_r>
 8003e30:	4625      	mov	r5, r4
 8003e32:	4628      	mov	r0, r5
 8003e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e38:	f000 f838 	bl	8003eac <_malloc_usable_size_r>
 8003e3c:	4284      	cmp	r4, r0
 8003e3e:	4607      	mov	r7, r0
 8003e40:	d802      	bhi.n	8003e48 <_realloc_r+0x34>
 8003e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e46:	d812      	bhi.n	8003e6e <_realloc_r+0x5a>
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	f7ff ff6e 	bl	8003d2c <_malloc_r>
 8003e50:	4605      	mov	r5, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0ed      	beq.n	8003e32 <_realloc_r+0x1e>
 8003e56:	42bc      	cmp	r4, r7
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	bf28      	it	cs
 8003e5e:	463a      	movcs	r2, r7
 8003e60:	f7ff fed0 	bl	8003c04 <memcpy>
 8003e64:	4631      	mov	r1, r6
 8003e66:	4640      	mov	r0, r8
 8003e68:	f7ff fef4 	bl	8003c54 <_free_r>
 8003e6c:	e7e1      	b.n	8003e32 <_realloc_r+0x1e>
 8003e6e:	4635      	mov	r5, r6
 8003e70:	e7df      	b.n	8003e32 <_realloc_r+0x1e>
	...

08003e74 <_sbrk_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	; (8003e90 <_sbrk_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fc fe6a 	bl	8000b58 <_sbrk>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_sbrk_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_sbrk_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	2000019c 	.word	0x2000019c

08003e94 <__malloc_lock>:
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <__malloc_lock+0x8>)
 8003e96:	f000 b811 	b.w	8003ebc <__retarget_lock_acquire_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	200001a0 	.word	0x200001a0

08003ea0 <__malloc_unlock>:
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <__malloc_unlock+0x8>)
 8003ea2:	f000 b80c 	b.w	8003ebe <__retarget_lock_release_recursive>
 8003ea6:	bf00      	nop
 8003ea8:	200001a0 	.word	0x200001a0

08003eac <_malloc_usable_size_r>:
 8003eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb0:	1f18      	subs	r0, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bfbc      	itt	lt
 8003eb6:	580b      	ldrlt	r3, [r1, r0]
 8003eb8:	18c0      	addlt	r0, r0, r3
 8003eba:	4770      	bx	lr

08003ebc <__retarget_lock_acquire_recursive>:
 8003ebc:	4770      	bx	lr

08003ebe <__retarget_lock_release_recursive>:
 8003ebe:	4770      	bx	lr

08003ec0 <_init>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	bf00      	nop
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr

08003ecc <_fini>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr
